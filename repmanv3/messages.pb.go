// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: messages.proto

package repmanv3

import (
	gtid "github.com/signal18/replication-manager/utils/gtid"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ServiceStatus int32

const (
	ServiceStatus_SERVICESTATUS_UNSPECIFIED ServiceStatus = 0
	ServiceStatus_RUNNING                   ServiceStatus = 1
	ServiceStatus_STARTING                  ServiceStatus = 2
	ServiceStatus_ERRORS                    ServiceStatus = 3
)

// Enum value maps for ServiceStatus.
var (
	ServiceStatus_name = map[int32]string{
		0: "SERVICESTATUS_UNSPECIFIED",
		1: "RUNNING",
		2: "STARTING",
		3: "ERRORS",
	}
	ServiceStatus_value = map[string]int32{
		"SERVICESTATUS_UNSPECIFIED": 0,
		"RUNNING":                   1,
		"STARTING":                  2,
		"ERRORS":                    3,
	}
)

func (x ServiceStatus) Enum() *ServiceStatus {
	p := new(ServiceStatus)
	*p = x
	return p
}

func (x ServiceStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_messages_proto_enumTypes[0].Descriptor()
}

func (ServiceStatus) Type() protoreflect.EnumType {
	return &file_messages_proto_enumTypes[0]
}

func (x ServiceStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceStatus.Descriptor instead.
func (ServiceStatus) EnumDescriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{0}
}

type ClusterSetting_Action int32

const (
	ClusterSetting_UNSPECIFIED          ClusterSetting_Action = 0
	ClusterSetting_DISCOVER             ClusterSetting_Action = 1
	ClusterSetting_APPLY_DYNAMIC_CONFIG ClusterSetting_Action = 2
	ClusterSetting_RELOAD               ClusterSetting_Action = 3
	ClusterSetting_SET                  ClusterSetting_Action = 4
	ClusterSetting_SWITCH               ClusterSetting_Action = 5
	ClusterSetting_ADD_DB_TAG           ClusterSetting_Action = 10
	ClusterSetting_DROP_DB_TAG          ClusterSetting_Action = 11
	ClusterSetting_ADD_PROXY_TAG        ClusterSetting_Action = 12
	ClusterSetting_DROP_PROXY_TAG       ClusterSetting_Action = 13
)

// Enum value maps for ClusterSetting_Action.
var (
	ClusterSetting_Action_name = map[int32]string{
		0:  "UNSPECIFIED",
		1:  "DISCOVER",
		2:  "APPLY_DYNAMIC_CONFIG",
		3:  "RELOAD",
		4:  "SET",
		5:  "SWITCH",
		10: "ADD_DB_TAG",
		11: "DROP_DB_TAG",
		12: "ADD_PROXY_TAG",
		13: "DROP_PROXY_TAG",
	}
	ClusterSetting_Action_value = map[string]int32{
		"UNSPECIFIED":          0,
		"DISCOVER":             1,
		"APPLY_DYNAMIC_CONFIG": 2,
		"RELOAD":               3,
		"SET":                  4,
		"SWITCH":               5,
		"ADD_DB_TAG":           10,
		"DROP_DB_TAG":          11,
		"ADD_PROXY_TAG":        12,
		"DROP_PROXY_TAG":       13,
	}
)

func (x ClusterSetting_Action) Enum() *ClusterSetting_Action {
	p := new(ClusterSetting_Action)
	*p = x
	return p
}

func (x ClusterSetting_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClusterSetting_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_messages_proto_enumTypes[1].Descriptor()
}

func (ClusterSetting_Action) Type() protoreflect.EnumType {
	return &file_messages_proto_enumTypes[1]
}

func (x ClusterSetting_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClusterSetting_Action.Descriptor instead.
func (ClusterSetting_Action) EnumDescriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{3, 0}
}

type ClusterSetting_Setting_SettingName int32

const (
	ClusterSetting_Setting_UNSPECIFIED                                 ClusterSetting_Setting_SettingName = 0
	ClusterSetting_Setting_BACKUP_BINLOGS_KEEP                         ClusterSetting_Setting_SettingName = 1
	ClusterSetting_Setting_BACKUP_KEEP_DAILY                           ClusterSetting_Setting_SettingName = 2
	ClusterSetting_Setting_BACKUP_KEEP_HOURLY                          ClusterSetting_Setting_SettingName = 3
	ClusterSetting_Setting_BACKUP_KEEP_MONTHLY                         ClusterSetting_Setting_SettingName = 4
	ClusterSetting_Setting_BACKUP_KEEP_WEEKLY                          ClusterSetting_Setting_SettingName = 5
	ClusterSetting_Setting_BACKUP_KEEP_YEARLY                          ClusterSetting_Setting_SettingName = 6
	ClusterSetting_Setting_BACKUP_LOGICAL_TYPE                         ClusterSetting_Setting_SettingName = 7
	ClusterSetting_Setting_BACKUP_PHYSICAL_TYPE                        ClusterSetting_Setting_SettingName = 8
	ClusterSetting_Setting_DB_SERVERS_CREDENTIAL                       ClusterSetting_Setting_SettingName = 9
	ClusterSetting_Setting_DB_SERVERS_HOSTS                            ClusterSetting_Setting_SettingName = 10
	ClusterSetting_Setting_FAILOVER_LIMIT                              ClusterSetting_Setting_SettingName = 11
	ClusterSetting_Setting_FAILOVER_MAX_SLAVE_DELAY                    ClusterSetting_Setting_SettingName = 12
	ClusterSetting_Setting_MAXSCALE_SERVERS_CREDENTIAL                 ClusterSetting_Setting_SettingName = 13
	ClusterSetting_Setting_MONITORING_ADDRESS                          ClusterSetting_Setting_SettingName = 14
	ClusterSetting_Setting_PROV_DB_AGENTS                              ClusterSetting_Setting_SettingName = 15
	ClusterSetting_Setting_PROV_DB_CPU_CORES                           ClusterSetting_Setting_SettingName = 16
	ClusterSetting_Setting_PROV_DB_DISK_DEVICE                         ClusterSetting_Setting_SettingName = 17
	ClusterSetting_Setting_PROV_DB_DISK_FS                             ClusterSetting_Setting_SettingName = 18
	ClusterSetting_Setting_PROV_DB_DISK_IOPS                           ClusterSetting_Setting_SettingName = 19
	ClusterSetting_Setting_PROV_DB_DISK_POOL                           ClusterSetting_Setting_SettingName = 20
	ClusterSetting_Setting_PROV_DB_DISK_SIZE                           ClusterSetting_Setting_SettingName = 21
	ClusterSetting_Setting_PROV_DB_DISK_TYPE                           ClusterSetting_Setting_SettingName = 22
	ClusterSetting_Setting_PROV_DB_EXPIRE_LOG_DAYS                     ClusterSetting_Setting_SettingName = 23
	ClusterSetting_Setting_PROV_DB_IMAGE                               ClusterSetting_Setting_SettingName = 24
	ClusterSetting_Setting_PROV_DB_MAX_CONNECTIONS                     ClusterSetting_Setting_SettingName = 25
	ClusterSetting_Setting_PROV_DB_MEMORY                              ClusterSetting_Setting_SettingName = 26
	ClusterSetting_Setting_PROV_DB_SERVICE_TYPE                        ClusterSetting_Setting_SettingName = 27
	ClusterSetting_Setting_PROV_NET_CNI_CLUSTER                        ClusterSetting_Setting_SettingName = 28
	ClusterSetting_Setting_PROV_ORCHESTRATOR_CLUSTER                   ClusterSetting_Setting_SettingName = 29
	ClusterSetting_Setting_PROV_ORCHESTRATOR                           ClusterSetting_Setting_SettingName = 30
	ClusterSetting_Setting_PROV_PROXY_AGENTS                           ClusterSetting_Setting_SettingName = 31
	ClusterSetting_Setting_PROV_PROXY_CPU_CORES                        ClusterSetting_Setting_SettingName = 32
	ClusterSetting_Setting_PROV_PROXY_DISK_DEVICE                      ClusterSetting_Setting_SettingName = 33
	ClusterSetting_Setting_PROV_PROXY_DISK_FS                          ClusterSetting_Setting_SettingName = 34
	ClusterSetting_Setting_PROV_PROXY_DISK_POOL                        ClusterSetting_Setting_SettingName = 35
	ClusterSetting_Setting_PROV_PROXY_DISK_SIZE                        ClusterSetting_Setting_SettingName = 36
	ClusterSetting_Setting_PROV_PROXY_DISK_TYPE                        ClusterSetting_Setting_SettingName = 37
	ClusterSetting_Setting_PROV_PROXY_DOCKER_HAPROXY_IMG               ClusterSetting_Setting_SettingName = 38
	ClusterSetting_Setting_PROV_PROXY_DOCKER_MAXSCALE_IMG              ClusterSetting_Setting_SettingName = 39
	ClusterSetting_Setting_PROV_PROXY_DOCKER_PROXYSQL_IMG              ClusterSetting_Setting_SettingName = 47
	ClusterSetting_Setting_PROV_PROXY_DOCKER_SHARDPROXY_IMG            ClusterSetting_Setting_SettingName = 48
	ClusterSetting_Setting_PROV_PROXY_MEMORY                           ClusterSetting_Setting_SettingName = 49
	ClusterSetting_Setting_PROV_PROXY_SERVICE_TYPE                     ClusterSetting_Setting_SettingName = 50
	ClusterSetting_Setting_PROV_SERVICE_PLAN                           ClusterSetting_Setting_SettingName = 51
	ClusterSetting_Setting_PROV_SPHINX_IMG                             ClusterSetting_Setting_SettingName = 52
	ClusterSetting_Setting_PROXY_SERVERS_BACKEND_MAX_CONNECTIONS       ClusterSetting_Setting_SettingName = 53
	ClusterSetting_Setting_PROXY_SERVERS_BACKEND_MAX_REPLICATION_LAG   ClusterSetting_Setting_SettingName = 54
	ClusterSetting_Setting_PROXYSQL_SERVERS_CREDENTIAL                 ClusterSetting_Setting_SettingName = 55
	ClusterSetting_Setting_REPLICATION_CREDENTIAL                      ClusterSetting_Setting_SettingName = 56
	ClusterSetting_Setting_SCHEDULER_DB_SERVERS_LOGICAL_BACKUP_CRON    ClusterSetting_Setting_SettingName = 57
	ClusterSetting_Setting_SCHEDULER_DB_SERVERS_LOGS_CRON              ClusterSetting_Setting_SettingName = 58
	ClusterSetting_Setting_SCHEDULER_DB_SERVERS_LOGS_TABLE_ROTATE_CRON ClusterSetting_Setting_SettingName = 59
	ClusterSetting_Setting_SCHEDULER_DB_SERVERS_OPTIMIZE_CRON          ClusterSetting_Setting_SettingName = 60
	ClusterSetting_Setting_SCHEDULER_DB_SERVERS_PHYSICAL_BACKUP_CRON   ClusterSetting_Setting_SettingName = 61
	ClusterSetting_Setting_SCHEDULER_JOBS_SSH_CRON                     ClusterSetting_Setting_SettingName = 62
	ClusterSetting_Setting_SCHEDULER_ROLLING_REPROV_CRON               ClusterSetting_Setting_SettingName = 63
	ClusterSetting_Setting_SCHEDULER_ROLLING_RESTART_CRON              ClusterSetting_Setting_SettingName = 64
	ClusterSetting_Setting_SCHEDULER_SLA_ROTATE_CRON                   ClusterSetting_Setting_SettingName = 65
	ClusterSetting_Setting_SHARDPROXY_SERVERS_CREDENTIAL               ClusterSetting_Setting_SettingName = 66
	ClusterSetting_Setting_SWITCHOVER_WAIT_ROUTE_CHANGE                ClusterSetting_Setting_SettingName = 67
)

// Enum value maps for ClusterSetting_Setting_SettingName.
var (
	ClusterSetting_Setting_SettingName_name = map[int32]string{
		0:  "UNSPECIFIED",
		1:  "BACKUP_BINLOGS_KEEP",
		2:  "BACKUP_KEEP_DAILY",
		3:  "BACKUP_KEEP_HOURLY",
		4:  "BACKUP_KEEP_MONTHLY",
		5:  "BACKUP_KEEP_WEEKLY",
		6:  "BACKUP_KEEP_YEARLY",
		7:  "BACKUP_LOGICAL_TYPE",
		8:  "BACKUP_PHYSICAL_TYPE",
		9:  "DB_SERVERS_CREDENTIAL",
		10: "DB_SERVERS_HOSTS",
		11: "FAILOVER_LIMIT",
		12: "FAILOVER_MAX_SLAVE_DELAY",
		13: "MAXSCALE_SERVERS_CREDENTIAL",
		14: "MONITORING_ADDRESS",
		15: "PROV_DB_AGENTS",
		16: "PROV_DB_CPU_CORES",
		17: "PROV_DB_DISK_DEVICE",
		18: "PROV_DB_DISK_FS",
		19: "PROV_DB_DISK_IOPS",
		20: "PROV_DB_DISK_POOL",
		21: "PROV_DB_DISK_SIZE",
		22: "PROV_DB_DISK_TYPE",
		23: "PROV_DB_EXPIRE_LOG_DAYS",
		24: "PROV_DB_IMAGE",
		25: "PROV_DB_MAX_CONNECTIONS",
		26: "PROV_DB_MEMORY",
		27: "PROV_DB_SERVICE_TYPE",
		28: "PROV_NET_CNI_CLUSTER",
		29: "PROV_ORCHESTRATOR_CLUSTER",
		30: "PROV_ORCHESTRATOR",
		31: "PROV_PROXY_AGENTS",
		32: "PROV_PROXY_CPU_CORES",
		33: "PROV_PROXY_DISK_DEVICE",
		34: "PROV_PROXY_DISK_FS",
		35: "PROV_PROXY_DISK_POOL",
		36: "PROV_PROXY_DISK_SIZE",
		37: "PROV_PROXY_DISK_TYPE",
		38: "PROV_PROXY_DOCKER_HAPROXY_IMG",
		39: "PROV_PROXY_DOCKER_MAXSCALE_IMG",
		47: "PROV_PROXY_DOCKER_PROXYSQL_IMG",
		48: "PROV_PROXY_DOCKER_SHARDPROXY_IMG",
		49: "PROV_PROXY_MEMORY",
		50: "PROV_PROXY_SERVICE_TYPE",
		51: "PROV_SERVICE_PLAN",
		52: "PROV_SPHINX_IMG",
		53: "PROXY_SERVERS_BACKEND_MAX_CONNECTIONS",
		54: "PROXY_SERVERS_BACKEND_MAX_REPLICATION_LAG",
		55: "PROXYSQL_SERVERS_CREDENTIAL",
		56: "REPLICATION_CREDENTIAL",
		57: "SCHEDULER_DB_SERVERS_LOGICAL_BACKUP_CRON",
		58: "SCHEDULER_DB_SERVERS_LOGS_CRON",
		59: "SCHEDULER_DB_SERVERS_LOGS_TABLE_ROTATE_CRON",
		60: "SCHEDULER_DB_SERVERS_OPTIMIZE_CRON",
		61: "SCHEDULER_DB_SERVERS_PHYSICAL_BACKUP_CRON",
		62: "SCHEDULER_JOBS_SSH_CRON",
		63: "SCHEDULER_ROLLING_REPROV_CRON",
		64: "SCHEDULER_ROLLING_RESTART_CRON",
		65: "SCHEDULER_SLA_ROTATE_CRON",
		66: "SHARDPROXY_SERVERS_CREDENTIAL",
		67: "SWITCHOVER_WAIT_ROUTE_CHANGE",
	}
	ClusterSetting_Setting_SettingName_value = map[string]int32{
		"UNSPECIFIED":                                 0,
		"BACKUP_BINLOGS_KEEP":                         1,
		"BACKUP_KEEP_DAILY":                           2,
		"BACKUP_KEEP_HOURLY":                          3,
		"BACKUP_KEEP_MONTHLY":                         4,
		"BACKUP_KEEP_WEEKLY":                          5,
		"BACKUP_KEEP_YEARLY":                          6,
		"BACKUP_LOGICAL_TYPE":                         7,
		"BACKUP_PHYSICAL_TYPE":                        8,
		"DB_SERVERS_CREDENTIAL":                       9,
		"DB_SERVERS_HOSTS":                            10,
		"FAILOVER_LIMIT":                              11,
		"FAILOVER_MAX_SLAVE_DELAY":                    12,
		"MAXSCALE_SERVERS_CREDENTIAL":                 13,
		"MONITORING_ADDRESS":                          14,
		"PROV_DB_AGENTS":                              15,
		"PROV_DB_CPU_CORES":                           16,
		"PROV_DB_DISK_DEVICE":                         17,
		"PROV_DB_DISK_FS":                             18,
		"PROV_DB_DISK_IOPS":                           19,
		"PROV_DB_DISK_POOL":                           20,
		"PROV_DB_DISK_SIZE":                           21,
		"PROV_DB_DISK_TYPE":                           22,
		"PROV_DB_EXPIRE_LOG_DAYS":                     23,
		"PROV_DB_IMAGE":                               24,
		"PROV_DB_MAX_CONNECTIONS":                     25,
		"PROV_DB_MEMORY":                              26,
		"PROV_DB_SERVICE_TYPE":                        27,
		"PROV_NET_CNI_CLUSTER":                        28,
		"PROV_ORCHESTRATOR_CLUSTER":                   29,
		"PROV_ORCHESTRATOR":                           30,
		"PROV_PROXY_AGENTS":                           31,
		"PROV_PROXY_CPU_CORES":                        32,
		"PROV_PROXY_DISK_DEVICE":                      33,
		"PROV_PROXY_DISK_FS":                          34,
		"PROV_PROXY_DISK_POOL":                        35,
		"PROV_PROXY_DISK_SIZE":                        36,
		"PROV_PROXY_DISK_TYPE":                        37,
		"PROV_PROXY_DOCKER_HAPROXY_IMG":               38,
		"PROV_PROXY_DOCKER_MAXSCALE_IMG":              39,
		"PROV_PROXY_DOCKER_PROXYSQL_IMG":              47,
		"PROV_PROXY_DOCKER_SHARDPROXY_IMG":            48,
		"PROV_PROXY_MEMORY":                           49,
		"PROV_PROXY_SERVICE_TYPE":                     50,
		"PROV_SERVICE_PLAN":                           51,
		"PROV_SPHINX_IMG":                             52,
		"PROXY_SERVERS_BACKEND_MAX_CONNECTIONS":       53,
		"PROXY_SERVERS_BACKEND_MAX_REPLICATION_LAG":   54,
		"PROXYSQL_SERVERS_CREDENTIAL":                 55,
		"REPLICATION_CREDENTIAL":                      56,
		"SCHEDULER_DB_SERVERS_LOGICAL_BACKUP_CRON":    57,
		"SCHEDULER_DB_SERVERS_LOGS_CRON":              58,
		"SCHEDULER_DB_SERVERS_LOGS_TABLE_ROTATE_CRON": 59,
		"SCHEDULER_DB_SERVERS_OPTIMIZE_CRON":          60,
		"SCHEDULER_DB_SERVERS_PHYSICAL_BACKUP_CRON":   61,
		"SCHEDULER_JOBS_SSH_CRON":                     62,
		"SCHEDULER_ROLLING_REPROV_CRON":               63,
		"SCHEDULER_ROLLING_RESTART_CRON":              64,
		"SCHEDULER_SLA_ROTATE_CRON":                   65,
		"SHARDPROXY_SERVERS_CREDENTIAL":               66,
		"SWITCHOVER_WAIT_ROUTE_CHANGE":                67,
	}
)

func (x ClusterSetting_Setting_SettingName) Enum() *ClusterSetting_Setting_SettingName {
	p := new(ClusterSetting_Setting_SettingName)
	*p = x
	return p
}

func (x ClusterSetting_Setting_SettingName) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClusterSetting_Setting_SettingName) Descriptor() protoreflect.EnumDescriptor {
	return file_messages_proto_enumTypes[2].Descriptor()
}

func (ClusterSetting_Setting_SettingName) Type() protoreflect.EnumType {
	return &file_messages_proto_enumTypes[2]
}

func (x ClusterSetting_Setting_SettingName) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClusterSetting_Setting_SettingName.Descriptor instead.
func (ClusterSetting_Setting_SettingName) EnumDescriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{3, 0, 0}
}

type ClusterSetting_Switch_SwitchName int32

const (
	ClusterSetting_Switch_UNSPECIFIED                            ClusterSetting_Switch_SwitchName = 0
	ClusterSetting_Switch_AUTOREJOIN_BACKUP_BINLOG               ClusterSetting_Switch_SwitchName = 1
	ClusterSetting_Switch_AUTOREJOIN_FLASHBACK_ON_SYNC           ClusterSetting_Switch_SwitchName = 2
	ClusterSetting_Switch_AUTOREJOIN_FLASHBACK_ON_UNSYNC         ClusterSetting_Switch_SwitchName = 3 //?????
	ClusterSetting_Switch_AUTOREJOIN_FLASHBACK                   ClusterSetting_Switch_SwitchName = 4
	ClusterSetting_Switch_AUTOREJOIN_LOGICAL_BACKUP              ClusterSetting_Switch_SwitchName = 5
	ClusterSetting_Switch_AUTOREJOIN_MYSQLDUMP                   ClusterSetting_Switch_SwitchName = 6
	ClusterSetting_Switch_AUTOREJOIN_PHYSICAL_BACKUP             ClusterSetting_Switch_SwitchName = 7
	ClusterSetting_Switch_AUTOREJOIN_SLAVE_POSITIONAL_HEARTBEAT  ClusterSetting_Switch_SwitchName = 8
	ClusterSetting_Switch_AUTOREJOIN_ZFS_FLASHBACK               ClusterSetting_Switch_SwitchName = 9
	ClusterSetting_Switch_AUTOREJOIN                             ClusterSetting_Switch_SwitchName = 10
	ClusterSetting_Switch_AUTOSEED                               ClusterSetting_Switch_SwitchName = 11
	ClusterSetting_Switch_BACKUP_BINLOGS                         ClusterSetting_Switch_SwitchName = 12
	ClusterSetting_Switch_BACKUP_RESTIC                          ClusterSetting_Switch_SwitchName = 13
	ClusterSetting_Switch_CHECK_REPLICATION_FILTERS              ClusterSetting_Switch_SwitchName = 14
	ClusterSetting_Switch_CHECK_REPLICATION_STATE                ClusterSetting_Switch_SwitchName = 15
	ClusterSetting_Switch_DATABASE_HEARTBEAT                     ClusterSetting_Switch_SwitchName = 16
	ClusterSetting_Switch_FAILOVER_AT_SYNC                       ClusterSetting_Switch_SwitchName = 17
	ClusterSetting_Switch_FAILOVER_EVENT_SCHEDULER               ClusterSetting_Switch_SwitchName = 18
	ClusterSetting_Switch_FAILOVER_EVENT_STATUS                  ClusterSetting_Switch_SwitchName = 19
	ClusterSetting_Switch_FAILOVER_MODE                          ClusterSetting_Switch_SwitchName = 20
	ClusterSetting_Switch_FAILOVER_READONLY_STATE                ClusterSetting_Switch_SwitchName = 21
	ClusterSetting_Switch_FAILOVER_RESTART_UNSAFE                ClusterSetting_Switch_SwitchName = 22
	ClusterSetting_Switch_FORCE_SLAVE_NO_GTID_MODE               ClusterSetting_Switch_SwitchName = 23
	ClusterSetting_Switch_GRAPHITE_EMBEDDED                      ClusterSetting_Switch_SwitchName = 24
	ClusterSetting_Switch_GRAPHITE_METRICS                       ClusterSetting_Switch_SwitchName = 25
	ClusterSetting_Switch_MONITORING_CAPTURE                     ClusterSetting_Switch_SwitchName = 26
	ClusterSetting_Switch_MONITORING_INNODB_STATUS               ClusterSetting_Switch_SwitchName = 27
	ClusterSetting_Switch_MONITORING_PAUSE                       ClusterSetting_Switch_SwitchName = 28
	ClusterSetting_Switch_MONITORING_PROCESSLIST                 ClusterSetting_Switch_SwitchName = 29
	ClusterSetting_Switch_MONITORING_QUERIES                     ClusterSetting_Switch_SwitchName = 30
	ClusterSetting_Switch_MONITORING_SAVE_CONFIG                 ClusterSetting_Switch_SwitchName = 31
	ClusterSetting_Switch_MONITORING_SCHEDULER                   ClusterSetting_Switch_SwitchName = 32
	ClusterSetting_Switch_MONITORING_SCHEMA_CHANGE               ClusterSetting_Switch_SwitchName = 33
	ClusterSetting_Switch_MONITORING_VARIABLE_DIFF               ClusterSetting_Switch_SwitchName = 34
	ClusterSetting_Switch_PROV_DB_APPLY_DYNAMIC_CONFIG           ClusterSetting_Switch_SwitchName = 35
	ClusterSetting_Switch_PROV_DOCKER_DAEMON_PRIVATE             ClusterSetting_Switch_SwitchName = 36
	ClusterSetting_Switch_PROV_NET_CNI                           ClusterSetting_Switch_SwitchName = 37
	ClusterSetting_Switch_PROXY_SERVERS_BACKEND_COMPRESSION      ClusterSetting_Switch_SwitchName = 38
	ClusterSetting_Switch_PROXY_SERVERS_READ_ON_MASTER           ClusterSetting_Switch_SwitchName = 39
	ClusterSetting_Switch_PROXYSQL_BOOTSTRAP_HOSTGROUPS          ClusterSetting_Switch_SwitchName = 40
	ClusterSetting_Switch_PROXYSQL_BOOTSTRAP_QUERY_RULES         ClusterSetting_Switch_SwitchName = 41
	ClusterSetting_Switch_PROXYSQL_BOOTSTRAP_SERVERS             ClusterSetting_Switch_SwitchName = 42
	ClusterSetting_Switch_PROXYSQL_BOOTSTRAP_USERS               ClusterSetting_Switch_SwitchName = 43
	ClusterSetting_Switch_PROXYSQL_BOOTSTRAP_VARIABLES           ClusterSetting_Switch_SwitchName = 44
	ClusterSetting_Switch_PROXYSQL_BOOTSTRAP                     ClusterSetting_Switch_SwitchName = 45
	ClusterSetting_Switch_PROXYSQL_COPY_GRANTS                   ClusterSetting_Switch_SwitchName = 46
	ClusterSetting_Switch_PROXYSQL                               ClusterSetting_Switch_SwitchName = 47
	ClusterSetting_Switch_SCHEDULER_DB_SERVERS_LOGICAL_BACKUP    ClusterSetting_Switch_SwitchName = 48
	ClusterSetting_Switch_SCHEDULER_DB_SERVERS_LOGS_TABLE_ROTATE ClusterSetting_Switch_SwitchName = 49
	ClusterSetting_Switch_SCHEDULER_DB_SERVERS_LOGS              ClusterSetting_Switch_SwitchName = 50
	ClusterSetting_Switch_SCHEDULER_DB_SERVERS_OPTIMIZE          ClusterSetting_Switch_SwitchName = 51
	ClusterSetting_Switch_SCHEDULER_DB_SERVERS_PHYSICAL_BACKUP   ClusterSetting_Switch_SwitchName = 52
	ClusterSetting_Switch_SCHEDULER_JOBS_SSH                     ClusterSetting_Switch_SwitchName = 53
	ClusterSetting_Switch_SCHEDULER_ROLLING_REPROV               ClusterSetting_Switch_SwitchName = 54
	ClusterSetting_Switch_SCHEDULER_ROLLING_RESTART              ClusterSetting_Switch_SwitchName = 55
	ClusterSetting_Switch_SHARDPROXY_COPY_GRANTS                 ClusterSetting_Switch_SwitchName = 56
	ClusterSetting_Switch_SWITCHOVER_AT_SYNC                     ClusterSetting_Switch_SwitchName = 57
	ClusterSetting_Switch_TEST                                   ClusterSetting_Switch_SwitchName = 58
	ClusterSetting_Switch_VERBOSE                                ClusterSetting_Switch_SwitchName = 59
)

// Enum value maps for ClusterSetting_Switch_SwitchName.
var (
	ClusterSetting_Switch_SwitchName_name = map[int32]string{
		0:  "UNSPECIFIED",
		1:  "AUTOREJOIN_BACKUP_BINLOG",
		2:  "AUTOREJOIN_FLASHBACK_ON_SYNC",
		3:  "AUTOREJOIN_FLASHBACK_ON_UNSYNC",
		4:  "AUTOREJOIN_FLASHBACK",
		5:  "AUTOREJOIN_LOGICAL_BACKUP",
		6:  "AUTOREJOIN_MYSQLDUMP",
		7:  "AUTOREJOIN_PHYSICAL_BACKUP",
		8:  "AUTOREJOIN_SLAVE_POSITIONAL_HEARTBEAT",
		9:  "AUTOREJOIN_ZFS_FLASHBACK",
		10: "AUTOREJOIN",
		11: "AUTOSEED",
		12: "BACKUP_BINLOGS",
		13: "BACKUP_RESTIC",
		14: "CHECK_REPLICATION_FILTERS",
		15: "CHECK_REPLICATION_STATE",
		16: "DATABASE_HEARTBEAT",
		17: "FAILOVER_AT_SYNC",
		18: "FAILOVER_EVENT_SCHEDULER",
		19: "FAILOVER_EVENT_STATUS",
		20: "FAILOVER_MODE",
		21: "FAILOVER_READONLY_STATE",
		22: "FAILOVER_RESTART_UNSAFE",
		23: "FORCE_SLAVE_NO_GTID_MODE",
		24: "GRAPHITE_EMBEDDED",
		25: "GRAPHITE_METRICS",
		26: "MONITORING_CAPTURE",
		27: "MONITORING_INNODB_STATUS",
		28: "MONITORING_PAUSE",
		29: "MONITORING_PROCESSLIST",
		30: "MONITORING_QUERIES",
		31: "MONITORING_SAVE_CONFIG",
		32: "MONITORING_SCHEDULER",
		33: "MONITORING_SCHEMA_CHANGE",
		34: "MONITORING_VARIABLE_DIFF",
		35: "PROV_DB_APPLY_DYNAMIC_CONFIG",
		36: "PROV_DOCKER_DAEMON_PRIVATE",
		37: "PROV_NET_CNI",
		38: "PROXY_SERVERS_BACKEND_COMPRESSION",
		39: "PROXY_SERVERS_READ_ON_MASTER",
		40: "PROXYSQL_BOOTSTRAP_HOSTGROUPS",
		41: "PROXYSQL_BOOTSTRAP_QUERY_RULES",
		42: "PROXYSQL_BOOTSTRAP_SERVERS",
		43: "PROXYSQL_BOOTSTRAP_USERS",
		44: "PROXYSQL_BOOTSTRAP_VARIABLES",
		45: "PROXYSQL_BOOTSTRAP",
		46: "PROXYSQL_COPY_GRANTS",
		47: "PROXYSQL",
		48: "SCHEDULER_DB_SERVERS_LOGICAL_BACKUP",
		49: "SCHEDULER_DB_SERVERS_LOGS_TABLE_ROTATE",
		50: "SCHEDULER_DB_SERVERS_LOGS",
		51: "SCHEDULER_DB_SERVERS_OPTIMIZE",
		52: "SCHEDULER_DB_SERVERS_PHYSICAL_BACKUP",
		53: "SCHEDULER_JOBS_SSH",
		54: "SCHEDULER_ROLLING_REPROV",
		55: "SCHEDULER_ROLLING_RESTART",
		56: "SHARDPROXY_COPY_GRANTS",
		57: "SWITCHOVER_AT_SYNC",
		58: "TEST",
		59: "VERBOSE",
	}
	ClusterSetting_Switch_SwitchName_value = map[string]int32{
		"UNSPECIFIED":                            0,
		"AUTOREJOIN_BACKUP_BINLOG":               1,
		"AUTOREJOIN_FLASHBACK_ON_SYNC":           2,
		"AUTOREJOIN_FLASHBACK_ON_UNSYNC":         3,
		"AUTOREJOIN_FLASHBACK":                   4,
		"AUTOREJOIN_LOGICAL_BACKUP":              5,
		"AUTOREJOIN_MYSQLDUMP":                   6,
		"AUTOREJOIN_PHYSICAL_BACKUP":             7,
		"AUTOREJOIN_SLAVE_POSITIONAL_HEARTBEAT":  8,
		"AUTOREJOIN_ZFS_FLASHBACK":               9,
		"AUTOREJOIN":                             10,
		"AUTOSEED":                               11,
		"BACKUP_BINLOGS":                         12,
		"BACKUP_RESTIC":                          13,
		"CHECK_REPLICATION_FILTERS":              14,
		"CHECK_REPLICATION_STATE":                15,
		"DATABASE_HEARTBEAT":                     16,
		"FAILOVER_AT_SYNC":                       17,
		"FAILOVER_EVENT_SCHEDULER":               18,
		"FAILOVER_EVENT_STATUS":                  19,
		"FAILOVER_MODE":                          20,
		"FAILOVER_READONLY_STATE":                21,
		"FAILOVER_RESTART_UNSAFE":                22,
		"FORCE_SLAVE_NO_GTID_MODE":               23,
		"GRAPHITE_EMBEDDED":                      24,
		"GRAPHITE_METRICS":                       25,
		"MONITORING_CAPTURE":                     26,
		"MONITORING_INNODB_STATUS":               27,
		"MONITORING_PAUSE":                       28,
		"MONITORING_PROCESSLIST":                 29,
		"MONITORING_QUERIES":                     30,
		"MONITORING_SAVE_CONFIG":                 31,
		"MONITORING_SCHEDULER":                   32,
		"MONITORING_SCHEMA_CHANGE":               33,
		"MONITORING_VARIABLE_DIFF":               34,
		"PROV_DB_APPLY_DYNAMIC_CONFIG":           35,
		"PROV_DOCKER_DAEMON_PRIVATE":             36,
		"PROV_NET_CNI":                           37,
		"PROXY_SERVERS_BACKEND_COMPRESSION":      38,
		"PROXY_SERVERS_READ_ON_MASTER":           39,
		"PROXYSQL_BOOTSTRAP_HOSTGROUPS":          40,
		"PROXYSQL_BOOTSTRAP_QUERY_RULES":         41,
		"PROXYSQL_BOOTSTRAP_SERVERS":             42,
		"PROXYSQL_BOOTSTRAP_USERS":               43,
		"PROXYSQL_BOOTSTRAP_VARIABLES":           44,
		"PROXYSQL_BOOTSTRAP":                     45,
		"PROXYSQL_COPY_GRANTS":                   46,
		"PROXYSQL":                               47,
		"SCHEDULER_DB_SERVERS_LOGICAL_BACKUP":    48,
		"SCHEDULER_DB_SERVERS_LOGS_TABLE_ROTATE": 49,
		"SCHEDULER_DB_SERVERS_LOGS":              50,
		"SCHEDULER_DB_SERVERS_OPTIMIZE":          51,
		"SCHEDULER_DB_SERVERS_PHYSICAL_BACKUP":   52,
		"SCHEDULER_JOBS_SSH":                     53,
		"SCHEDULER_ROLLING_REPROV":               54,
		"SCHEDULER_ROLLING_RESTART":              55,
		"SHARDPROXY_COPY_GRANTS":                 56,
		"SWITCHOVER_AT_SYNC":                     57,
		"TEST":                                   58,
		"VERBOSE":                                59,
	}
)

func (x ClusterSetting_Switch_SwitchName) Enum() *ClusterSetting_Switch_SwitchName {
	p := new(ClusterSetting_Switch_SwitchName)
	*p = x
	return p
}

func (x ClusterSetting_Switch_SwitchName) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClusterSetting_Switch_SwitchName) Descriptor() protoreflect.EnumDescriptor {
	return file_messages_proto_enumTypes[3].Descriptor()
}

func (ClusterSetting_Switch_SwitchName) Type() protoreflect.EnumType {
	return &file_messages_proto_enumTypes[3]
}

func (x ClusterSetting_Switch_SwitchName) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClusterSetting_Switch_SwitchName.Descriptor instead.
func (ClusterSetting_Switch_SwitchName) EnumDescriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{3, 1, 0}
}

type ClusterAction_Action int32

const (
	ClusterAction_ACTION_UNSPECIFIED     ClusterAction_Action = 0
	ClusterAction_ADD                    ClusterAction_Action = 1
	ClusterAction_ADDSERVER              ClusterAction_Action = 2
	ClusterAction_CANCEL_ROLLING_REPROV  ClusterAction_Action = 3
	ClusterAction_CANCEL_ROLLING_RESTART ClusterAction_Action = 4
	ClusterAction_CHECKSUM_ALL_TABLES    ClusterAction_Action = 5
	ClusterAction_FAILOVER               ClusterAction_Action = 6
	ClusterAction_MASTER_PHYSICAL_BACKUP ClusterAction_Action = 7
	ClusterAction_OPTIMIZE               ClusterAction_Action = 8
	ClusterAction_RESET_FAILOVER_CONTROL ClusterAction_Action = 10
	ClusterAction_RESET_SLA              ClusterAction_Action = 11
	ClusterAction_ROLLING                ClusterAction_Action = 12
	ClusterAction_ROTATEKEYS             ClusterAction_Action = 13
	ClusterAction_START_TRAFFIC          ClusterAction_Action = 14
	ClusterAction_STOP_TRAFFIC           ClusterAction_Action = 15
	ClusterAction_SWITCHOVER             ClusterAction_Action = 16
	ClusterAction_SYSBENCH               ClusterAction_Action = 17
	ClusterAction_WAITDATABASES          ClusterAction_Action = 18
	ClusterAction_REPLICATION_BOOTSTRAP  ClusterAction_Action = 19
	ClusterAction_REPLICATION_CLEANUP    ClusterAction_Action = 20
	ClusterAction_PROVISION              ClusterAction_Action = 21
	ClusterAction_UNPROVISION            ClusterAction_Action = 22
)

// Enum value maps for ClusterAction_Action.
var (
	ClusterAction_Action_name = map[int32]string{
		0:  "ACTION_UNSPECIFIED",
		1:  "ADD",
		2:  "ADDSERVER",
		3:  "CANCEL_ROLLING_REPROV",
		4:  "CANCEL_ROLLING_RESTART",
		5:  "CHECKSUM_ALL_TABLES",
		6:  "FAILOVER",
		7:  "MASTER_PHYSICAL_BACKUP",
		8:  "OPTIMIZE",
		10: "RESET_FAILOVER_CONTROL",
		11: "RESET_SLA",
		12: "ROLLING",
		13: "ROTATEKEYS",
		14: "START_TRAFFIC",
		15: "STOP_TRAFFIC",
		16: "SWITCHOVER",
		17: "SYSBENCH",
		18: "WAITDATABASES",
		19: "REPLICATION_BOOTSTRAP",
		20: "REPLICATION_CLEANUP",
		21: "PROVISION",
		22: "UNPROVISION",
	}
	ClusterAction_Action_value = map[string]int32{
		"ACTION_UNSPECIFIED":     0,
		"ADD":                    1,
		"ADDSERVER":              2,
		"CANCEL_ROLLING_REPROV":  3,
		"CANCEL_ROLLING_RESTART": 4,
		"CHECKSUM_ALL_TABLES":    5,
		"FAILOVER":               6,
		"MASTER_PHYSICAL_BACKUP": 7,
		"OPTIMIZE":               8,
		"RESET_FAILOVER_CONTROL": 10,
		"RESET_SLA":              11,
		"ROLLING":                12,
		"ROTATEKEYS":             13,
		"START_TRAFFIC":          14,
		"STOP_TRAFFIC":           15,
		"SWITCHOVER":             16,
		"SYSBENCH":               17,
		"WAITDATABASES":          18,
		"REPLICATION_BOOTSTRAP":  19,
		"REPLICATION_CLEANUP":    20,
		"PROVISION":              21,
		"UNPROVISION":            22,
	}
)

func (x ClusterAction_Action) Enum() *ClusterAction_Action {
	p := new(ClusterAction_Action)
	*p = x
	return p
}

func (x ClusterAction_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClusterAction_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_messages_proto_enumTypes[4].Descriptor()
}

func (ClusterAction_Action) Type() protoreflect.EnumType {
	return &file_messages_proto_enumTypes[4]
}

func (x ClusterAction_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClusterAction_Action.Descriptor instead.
func (ClusterAction_Action) EnumDescriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{4, 0}
}

type ClusterAction_ReplicationTopology int32

const (
	ClusterAction_RT_UNSPECIFIED       ClusterAction_ReplicationTopology = 0
	ClusterAction_MASTER_SLAVE         ClusterAction_ReplicationTopology = 1
	ClusterAction_MASTER_SLAVE_NO_GTID ClusterAction_ReplicationTopology = 2
	ClusterAction_MULTI_MASTER         ClusterAction_ReplicationTopology = 3
	ClusterAction_MULTI_TIER_SLAVE     ClusterAction_ReplicationTopology = 4
	ClusterAction_MAXSCALE_BINLOG      ClusterAction_ReplicationTopology = 5
	ClusterAction_MULTI_MASTER_RING    ClusterAction_ReplicationTopology = 6
	ClusterAction_MULTI_MASTER_WSREP   ClusterAction_ReplicationTopology = 7
)

// Enum value maps for ClusterAction_ReplicationTopology.
var (
	ClusterAction_ReplicationTopology_name = map[int32]string{
		0: "RT_UNSPECIFIED",
		1: "MASTER_SLAVE",
		2: "MASTER_SLAVE_NO_GTID",
		3: "MULTI_MASTER",
		4: "MULTI_TIER_SLAVE",
		5: "MAXSCALE_BINLOG",
		6: "MULTI_MASTER_RING",
		7: "MULTI_MASTER_WSREP",
	}
	ClusterAction_ReplicationTopology_value = map[string]int32{
		"RT_UNSPECIFIED":       0,
		"MASTER_SLAVE":         1,
		"MASTER_SLAVE_NO_GTID": 2,
		"MULTI_MASTER":         3,
		"MULTI_TIER_SLAVE":     4,
		"MAXSCALE_BINLOG":      5,
		"MULTI_MASTER_RING":    6,
		"MULTI_MASTER_WSREP":   7,
	}
)

func (x ClusterAction_ReplicationTopology) Enum() *ClusterAction_ReplicationTopology {
	p := new(ClusterAction_ReplicationTopology)
	*p = x
	return p
}

func (x ClusterAction_ReplicationTopology) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClusterAction_ReplicationTopology) Descriptor() protoreflect.EnumDescriptor {
	return file_messages_proto_enumTypes[5].Descriptor()
}

func (ClusterAction_ReplicationTopology) Type() protoreflect.EnumType {
	return &file_messages_proto_enumTypes[5]
}

func (x ClusterAction_ReplicationTopology) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClusterAction_ReplicationTopology.Descriptor instead.
func (ClusterAction_ReplicationTopology) EnumDescriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{4, 1}
}

type ClusterAction_Server_Type int32

const (
	ClusterAction_Server_TYPE_UNSPECIFIED ClusterAction_Server_Type = 0
	ClusterAction_Server_DATABASE         ClusterAction_Server_Type = 1
	ClusterAction_Server_PROXY            ClusterAction_Server_Type = 2
)

// Enum value maps for ClusterAction_Server_Type.
var (
	ClusterAction_Server_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "DATABASE",
		2: "PROXY",
	}
	ClusterAction_Server_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"DATABASE":         1,
		"PROXY":            2,
	}
)

func (x ClusterAction_Server_Type) Enum() *ClusterAction_Server_Type {
	p := new(ClusterAction_Server_Type)
	*p = x
	return p
}

func (x ClusterAction_Server_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClusterAction_Server_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_messages_proto_enumTypes[6].Descriptor()
}

func (ClusterAction_Server_Type) Type() protoreflect.EnumType {
	return &file_messages_proto_enumTypes[6]
}

func (x ClusterAction_Server_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClusterAction_Server_Type.Descriptor instead.
func (ClusterAction_Server_Type) EnumDescriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{4, 0, 0}
}

type ClusterAction_Server_Database int32

const (
	ClusterAction_Server_DATABASE_UNSPECIFIED ClusterAction_Server_Database = 0
	ClusterAction_Server_MARIADB              ClusterAction_Server_Database = 1
	ClusterAction_Server_PERCONA              ClusterAction_Server_Database = 2
	ClusterAction_Server_MYSQL                ClusterAction_Server_Database = 3
	ClusterAction_Server_POSTGRESQL           ClusterAction_Server_Database = 4
)

// Enum value maps for ClusterAction_Server_Database.
var (
	ClusterAction_Server_Database_name = map[int32]string{
		0: "DATABASE_UNSPECIFIED",
		1: "MARIADB",
		2: "PERCONA",
		3: "MYSQL",
		4: "POSTGRESQL",
	}
	ClusterAction_Server_Database_value = map[string]int32{
		"DATABASE_UNSPECIFIED": 0,
		"MARIADB":              1,
		"PERCONA":              2,
		"MYSQL":                3,
		"POSTGRESQL":           4,
	}
)

func (x ClusterAction_Server_Database) Enum() *ClusterAction_Server_Database {
	p := new(ClusterAction_Server_Database)
	*p = x
	return p
}

func (x ClusterAction_Server_Database) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClusterAction_Server_Database) Descriptor() protoreflect.EnumDescriptor {
	return file_messages_proto_enumTypes[7].Descriptor()
}

func (ClusterAction_Server_Database) Type() protoreflect.EnumType {
	return &file_messages_proto_enumTypes[7]
}

func (x ClusterAction_Server_Database) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClusterAction_Server_Database.Descriptor instead.
func (ClusterAction_Server_Database) EnumDescriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{4, 0, 1}
}

type ClusterAction_Server_Proxy int32

const (
	ClusterAction_Server_PROXY_UNSPECIFIED ClusterAction_Server_Proxy = 0
	ClusterAction_Server_MAXSCALE          ClusterAction_Server_Proxy = 1
	ClusterAction_Server_PROXYSQL          ClusterAction_Server_Proxy = 2
	ClusterAction_Server_SHARDPROXY        ClusterAction_Server_Proxy = 3
	ClusterAction_Server_HAPROXY           ClusterAction_Server_Proxy = 4
	ClusterAction_Server_MYPROXY           ClusterAction_Server_Proxy = 5
	ClusterAction_Server_EXTPROXY          ClusterAction_Server_Proxy = 6
	ClusterAction_Server_SPHINX            ClusterAction_Server_Proxy = 7
)

// Enum value maps for ClusterAction_Server_Proxy.
var (
	ClusterAction_Server_Proxy_name = map[int32]string{
		0: "PROXY_UNSPECIFIED",
		1: "MAXSCALE",
		2: "PROXYSQL",
		3: "SHARDPROXY",
		4: "HAPROXY",
		5: "MYPROXY",
		6: "EXTPROXY",
		7: "SPHINX",
	}
	ClusterAction_Server_Proxy_value = map[string]int32{
		"PROXY_UNSPECIFIED": 0,
		"MAXSCALE":          1,
		"PROXYSQL":          2,
		"SHARDPROXY":        3,
		"HAPROXY":           4,
		"MYPROXY":           5,
		"EXTPROXY":          6,
		"SPHINX":            7,
	}
)

func (x ClusterAction_Server_Proxy) Enum() *ClusterAction_Server_Proxy {
	p := new(ClusterAction_Server_Proxy)
	*p = x
	return p
}

func (x ClusterAction_Server_Proxy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClusterAction_Server_Proxy) Descriptor() protoreflect.EnumDescriptor {
	return file_messages_proto_enumTypes[8].Descriptor()
}

func (ClusterAction_Server_Proxy) Type() protoreflect.EnumType {
	return &file_messages_proto_enumTypes[8]
}

func (x ClusterAction_Server_Proxy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClusterAction_Server_Proxy.Descriptor instead.
func (ClusterAction_Server_Proxy) EnumDescriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{4, 0, 2}
}

type TopologyRetrieval_Retrieval int32

const (
	TopologyRetrieval_RETRIEVAL_UNSPECIFIED TopologyRetrieval_Retrieval = 0
	TopologyRetrieval_ALERTS                TopologyRetrieval_Retrieval = 1
	TopologyRetrieval_CRASHES               TopologyRetrieval_Retrieval = 2
	TopologyRetrieval_LOGS                  TopologyRetrieval_Retrieval = 3
	TopologyRetrieval_MASTER                TopologyRetrieval_Retrieval = 4
	TopologyRetrieval_PROXIES               TopologyRetrieval_Retrieval = 5
	TopologyRetrieval_SERVERS               TopologyRetrieval_Retrieval = 6
	TopologyRetrieval_SLAVES                TopologyRetrieval_Retrieval = 7
)

// Enum value maps for TopologyRetrieval_Retrieval.
var (
	TopologyRetrieval_Retrieval_name = map[int32]string{
		0: "RETRIEVAL_UNSPECIFIED",
		1: "ALERTS",
		2: "CRASHES",
		3: "LOGS",
		4: "MASTER",
		5: "PROXIES",
		6: "SERVERS",
		7: "SLAVES",
	}
	TopologyRetrieval_Retrieval_value = map[string]int32{
		"RETRIEVAL_UNSPECIFIED": 0,
		"ALERTS":                1,
		"CRASHES":               2,
		"LOGS":                  3,
		"MASTER":                4,
		"PROXIES":               5,
		"SERVERS":               6,
		"SLAVES":                7,
	}
)

func (x TopologyRetrieval_Retrieval) Enum() *TopologyRetrieval_Retrieval {
	p := new(TopologyRetrieval_Retrieval)
	*p = x
	return p
}

func (x TopologyRetrieval_Retrieval) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TopologyRetrieval_Retrieval) Descriptor() protoreflect.EnumDescriptor {
	return file_messages_proto_enumTypes[9].Descriptor()
}

func (TopologyRetrieval_Retrieval) Type() protoreflect.EnumType {
	return &file_messages_proto_enumTypes[9]
}

func (x TopologyRetrieval_Retrieval) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TopologyRetrieval_Retrieval.Descriptor instead.
func (TopologyRetrieval_Retrieval) EnumDescriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{6, 0}
}

type TableAction_Action int32

const (
	TableAction_ACTION_UNSPECIFIED TableAction_Action = 0
	TableAction_CHECKSUM_TABLE     TableAction_Action = 1
	TableAction_MOVE_TABLE         TableAction_Action = 2
	TableAction_RESHARD_TABLE      TableAction_Action = 3
	TableAction_UNIVERSAL_TABLE    TableAction_Action = 4
)

// Enum value maps for TableAction_Action.
var (
	TableAction_Action_name = map[int32]string{
		0: "ACTION_UNSPECIFIED",
		1: "CHECKSUM_TABLE",
		2: "MOVE_TABLE",
		3: "RESHARD_TABLE",
		4: "UNIVERSAL_TABLE",
	}
	TableAction_Action_value = map[string]int32{
		"ACTION_UNSPECIFIED": 0,
		"CHECKSUM_TABLE":     1,
		"MOVE_TABLE":         2,
		"RESHARD_TABLE":      3,
		"UNIVERSAL_TABLE":    4,
	}
)

func (x TableAction_Action) Enum() *TableAction_Action {
	p := new(TableAction_Action)
	*p = x
	return p
}

func (x TableAction_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TableAction_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_messages_proto_enumTypes[10].Descriptor()
}

func (TableAction_Action) Type() protoreflect.EnumType {
	return &file_messages_proto_enumTypes[10]
}

func (x TableAction_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TableAction_Action.Descriptor instead.
func (TableAction_Action) EnumDescriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{10, 0}
}

type ClusterTest_Test int32

const (
	ClusterTest_Unspecified                                                  ClusterTest_Test = 0
	ClusterTest_All                                                          ClusterTest_Test = 1
	ClusterTest_Suite                                                        ClusterTest_Test = 2
	ClusterTest_TestFailoverAllSlavesDelayNoRplChecksNoSemiSync              ClusterTest_Test = 3
	ClusterTest_TestFailoverAllSlavesDelayRplChecksNoSemiSync                ClusterTest_Test = 4
	ClusterTest_TestFailoverAssyncAutoRejoinFlashback                        ClusterTest_Test = 5
	ClusterTest_TestFailoverAssyncAutoRejoinNoGtid                           ClusterTest_Test = 6
	ClusterTest_TestFailoverAssyncAutoRejoinNowrites                         ClusterTest_Test = 7
	ClusterTest_TestFailoverAssyncAutoRejoinRelay                            ClusterTest_Test = 8
	ClusterTest_TestFailoverManual                                           ClusterTest_Test = 9
	ClusterTest_TestFailoverNoRplChecksNoSemiSync                            ClusterTest_Test = 10
	ClusterTest_TestFailoverNoRplChecksNoSemiSyncMasterHeartbeat             ClusterTest_Test = 11
	ClusterTest_TestFailoverNumberFailureLimitReach                          ClusterTest_Test = 12
	ClusterTest_TestFailoverSemisyncAutoRejoinFlashback                      ClusterTest_Test = 13
	ClusterTest_TestFailoverSemisyncAutoRejoinMSSXMSXXMSXMSSM                ClusterTest_Test = 14
	ClusterTest_TestFailoverSemisyncAutoRejoinMSSXMSXXMXSMSSM                ClusterTest_Test = 15
	ClusterTest_TestFailoverSemisyncAutoRejoinSafeMSMXMS                     ClusterTest_Test = 16
	ClusterTest_TestFailoverSemisyncAutoRejoinSafeMSMXXXRMXMS                ClusterTest_Test = 17
	ClusterTest_TestFailoverSemisyncAutoRejoinSafeMSMXXXRXSMS                ClusterTest_Test = 18
	ClusterTest_TestFailoverSemisyncAutoRejoinSafeMSXMSM                     ClusterTest_Test = 19
	ClusterTest_TestFailoverSemisyncAutoRejoinUnsafeMSMXMS                   ClusterTest_Test = 20
	ClusterTest_TestFailoverSemisyncAutoRejoinUnsafeMSMXXXMXMS               ClusterTest_Test = 21
	ClusterTest_TestFailoverSemisyncAutoRejoinUnsafeMSMXXXRMXMS              ClusterTest_Test = 22
	ClusterTest_TestFailoverSemisyncAutoRejoinUnsafeMSMXXXRXMSM              ClusterTest_Test = 23
	ClusterTest_TestFailoverSemisyncAutoRejoinUnsafeMSMXXXXMSM               ClusterTest_Test = 24
	ClusterTest_TestFailoverSemisyncAutoRejoinUnsafeMSXMSM                   ClusterTest_Test = 25
	ClusterTest_TestFailoverSemisyncAutoRejoinUnsafeMSXMXXMXMS               ClusterTest_Test = 26
	ClusterTest_TestFailoverSemisyncAutoRejoinUnsafeMSXMXXXMSM               ClusterTest_Test = 27
	ClusterTest_TestFailoverSemisyncSlavekilledAutoRejoin                    ClusterTest_Test = 28
	ClusterTest_TestFailoverTimeNotReach                                     ClusterTest_Test = 29
	ClusterTest_TestSlaReplAllSlavesDelayNoSemiSync                          ClusterTest_Test = 30
	ClusterTest_TestSlaReplAllSlavesStopNoSemiSync                           ClusterTest_Test = 31
	ClusterTest_TestSwitchover2TimesReplicationOkNoSemiSyncNoRplCheck        ClusterTest_Test = 32
	ClusterTest_TestSwitchover2TimesReplicationOkSemiSyncNoRplCheck          ClusterTest_Test = 33
	ClusterTest_TestSwitchoverAllSlavesDelayMultimasterNoRplChecksNoSemiSync ClusterTest_Test = 34
	ClusterTest_TestSwitchoverAllSlavesDelayNoRplChecksNoSemiSync            ClusterTest_Test = 35
	ClusterTest_TestSwitchoverAllSlavesDelayRplCheckNoSemiSync               ClusterTest_Test = 36
	ClusterTest_TestSwitchoverAllSlavesStopNoSemiSyncNoRplCheck              ClusterTest_Test = 37
	ClusterTest_TestSwitchoverAllSlavesStopRplCheckNoSemiSync                ClusterTest_Test = 38
	ClusterTest_TestSwitchoverBackPreferedMasterNoRplCheckSemiSync           ClusterTest_Test = 39
	ClusterTest_TestSwitchoverLongQueryNoRplCheckNoSemiSync                  ClusterTest_Test = 40
	ClusterTest_TestSwitchoverLongTransactionNoRplCheckNoSemiSync            ClusterTest_Test = 41
	ClusterTest_TestSwitchoverLongTrxWithoutCommitNoRplCheckNoSemiSync       ClusterTest_Test = 42
	ClusterTest_TestSwitchoverNoReadOnlyNoRplCheck                           ClusterTest_Test = 43
	ClusterTest_TestSwitchoverReadOnlyNoRplCheck                             ClusterTest_Test = 44
)

// Enum value maps for ClusterTest_Test.
var (
	ClusterTest_Test_name = map[int32]string{
		0:  "Unspecified",
		1:  "All",
		2:  "Suite",
		3:  "TestFailoverAllSlavesDelayNoRplChecksNoSemiSync",
		4:  "TestFailoverAllSlavesDelayRplChecksNoSemiSync",
		5:  "TestFailoverAssyncAutoRejoinFlashback",
		6:  "TestFailoverAssyncAutoRejoinNoGtid",
		7:  "TestFailoverAssyncAutoRejoinNowrites",
		8:  "TestFailoverAssyncAutoRejoinRelay",
		9:  "TestFailoverManual",
		10: "TestFailoverNoRplChecksNoSemiSync",
		11: "TestFailoverNoRplChecksNoSemiSyncMasterHeartbeat",
		12: "TestFailoverNumberFailureLimitReach",
		13: "TestFailoverSemisyncAutoRejoinFlashback",
		14: "TestFailoverSemisyncAutoRejoinMSSXMSXXMSXMSSM",
		15: "TestFailoverSemisyncAutoRejoinMSSXMSXXMXSMSSM",
		16: "TestFailoverSemisyncAutoRejoinSafeMSMXMS",
		17: "TestFailoverSemisyncAutoRejoinSafeMSMXXXRMXMS",
		18: "TestFailoverSemisyncAutoRejoinSafeMSMXXXRXSMS",
		19: "TestFailoverSemisyncAutoRejoinSafeMSXMSM",
		20: "TestFailoverSemisyncAutoRejoinUnsafeMSMXMS",
		21: "TestFailoverSemisyncAutoRejoinUnsafeMSMXXXMXMS",
		22: "TestFailoverSemisyncAutoRejoinUnsafeMSMXXXRMXMS",
		23: "TestFailoverSemisyncAutoRejoinUnsafeMSMXXXRXMSM",
		24: "TestFailoverSemisyncAutoRejoinUnsafeMSMXXXXMSM",
		25: "TestFailoverSemisyncAutoRejoinUnsafeMSXMSM",
		26: "TestFailoverSemisyncAutoRejoinUnsafeMSXMXXMXMS",
		27: "TestFailoverSemisyncAutoRejoinUnsafeMSXMXXXMSM",
		28: "TestFailoverSemisyncSlavekilledAutoRejoin",
		29: "TestFailoverTimeNotReach",
		30: "TestSlaReplAllSlavesDelayNoSemiSync",
		31: "TestSlaReplAllSlavesStopNoSemiSync",
		32: "TestSwitchover2TimesReplicationOkNoSemiSyncNoRplCheck",
		33: "TestSwitchover2TimesReplicationOkSemiSyncNoRplCheck",
		34: "TestSwitchoverAllSlavesDelayMultimasterNoRplChecksNoSemiSync",
		35: "TestSwitchoverAllSlavesDelayNoRplChecksNoSemiSync",
		36: "TestSwitchoverAllSlavesDelayRplCheckNoSemiSync",
		37: "TestSwitchoverAllSlavesStopNoSemiSyncNoRplCheck",
		38: "TestSwitchoverAllSlavesStopRplCheckNoSemiSync",
		39: "TestSwitchoverBackPreferedMasterNoRplCheckSemiSync",
		40: "TestSwitchoverLongQueryNoRplCheckNoSemiSync",
		41: "TestSwitchoverLongTransactionNoRplCheckNoSemiSync",
		42: "TestSwitchoverLongTrxWithoutCommitNoRplCheckNoSemiSync",
		43: "TestSwitchoverNoReadOnlyNoRplCheck",
		44: "TestSwitchoverReadOnlyNoRplCheck",
	}
	ClusterTest_Test_value = map[string]int32{
		"Unspecified": 0,
		"All":         1,
		"Suite":       2,
		"TestFailoverAllSlavesDelayNoRplChecksNoSemiSync":              3,
		"TestFailoverAllSlavesDelayRplChecksNoSemiSync":                4,
		"TestFailoverAssyncAutoRejoinFlashback":                        5,
		"TestFailoverAssyncAutoRejoinNoGtid":                           6,
		"TestFailoverAssyncAutoRejoinNowrites":                         7,
		"TestFailoverAssyncAutoRejoinRelay":                            8,
		"TestFailoverManual":                                           9,
		"TestFailoverNoRplChecksNoSemiSync":                            10,
		"TestFailoverNoRplChecksNoSemiSyncMasterHeartbeat":             11,
		"TestFailoverNumberFailureLimitReach":                          12,
		"TestFailoverSemisyncAutoRejoinFlashback":                      13,
		"TestFailoverSemisyncAutoRejoinMSSXMSXXMSXMSSM":                14,
		"TestFailoverSemisyncAutoRejoinMSSXMSXXMXSMSSM":                15,
		"TestFailoverSemisyncAutoRejoinSafeMSMXMS":                     16,
		"TestFailoverSemisyncAutoRejoinSafeMSMXXXRMXMS":                17,
		"TestFailoverSemisyncAutoRejoinSafeMSMXXXRXSMS":                18,
		"TestFailoverSemisyncAutoRejoinSafeMSXMSM":                     19,
		"TestFailoverSemisyncAutoRejoinUnsafeMSMXMS":                   20,
		"TestFailoverSemisyncAutoRejoinUnsafeMSMXXXMXMS":               21,
		"TestFailoverSemisyncAutoRejoinUnsafeMSMXXXRMXMS":              22,
		"TestFailoverSemisyncAutoRejoinUnsafeMSMXXXRXMSM":              23,
		"TestFailoverSemisyncAutoRejoinUnsafeMSMXXXXMSM":               24,
		"TestFailoverSemisyncAutoRejoinUnsafeMSXMSM":                   25,
		"TestFailoverSemisyncAutoRejoinUnsafeMSXMXXMXMS":               26,
		"TestFailoverSemisyncAutoRejoinUnsafeMSXMXXXMSM":               27,
		"TestFailoverSemisyncSlavekilledAutoRejoin":                    28,
		"TestFailoverTimeNotReach":                                     29,
		"TestSlaReplAllSlavesDelayNoSemiSync":                          30,
		"TestSlaReplAllSlavesStopNoSemiSync":                           31,
		"TestSwitchover2TimesReplicationOkNoSemiSyncNoRplCheck":        32,
		"TestSwitchover2TimesReplicationOkSemiSyncNoRplCheck":          33,
		"TestSwitchoverAllSlavesDelayMultimasterNoRplChecksNoSemiSync": 34,
		"TestSwitchoverAllSlavesDelayNoRplChecksNoSemiSync":            35,
		"TestSwitchoverAllSlavesDelayRplCheckNoSemiSync":               36,
		"TestSwitchoverAllSlavesStopNoSemiSyncNoRplCheck":              37,
		"TestSwitchoverAllSlavesStopRplCheckNoSemiSync":                38,
		"TestSwitchoverBackPreferedMasterNoRplCheckSemiSync":           39,
		"TestSwitchoverLongQueryNoRplCheckNoSemiSync":                  40,
		"TestSwitchoverLongTransactionNoRplCheckNoSemiSync":            41,
		"TestSwitchoverLongTrxWithoutCommitNoRplCheckNoSemiSync":       42,
		"TestSwitchoverNoReadOnlyNoRplCheck":                           43,
		"TestSwitchoverReadOnlyNoRplCheck":                             44,
	}
)

func (x ClusterTest_Test) Enum() *ClusterTest_Test {
	p := new(ClusterTest_Test)
	*p = x
	return p
}

func (x ClusterTest_Test) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClusterTest_Test) Descriptor() protoreflect.EnumDescriptor {
	return file_messages_proto_enumTypes[11].Descriptor()
}

func (ClusterTest_Test) Type() protoreflect.EnumType {
	return &file_messages_proto_enumTypes[11]
}

func (x ClusterTest_Test) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClusterTest_Test.Descriptor instead.
func (ClusterTest_Test) EnumDescriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{12, 0}
}

type ErrorInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason   string         `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
	Resource *ErrorResource `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
}

func (x *ErrorInfo) Reset() {
	*x = ErrorInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorInfo) ProtoMessage() {}

func (x *ErrorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorInfo.ProtoReflect.Descriptor instead.
func (*ErrorInfo) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{0}
}

func (x *ErrorInfo) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *ErrorInfo) GetResource() *ErrorResource {
	if x != nil {
		return x.Resource
	}
	return nil
}

type ErrorResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field    string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Contents string `protobuf:"bytes,2,opt,name=contents,proto3" json:"contents,omitempty"`
}

func (x *ErrorResource) Reset() {
	*x = ErrorResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorResource) ProtoMessage() {}

func (x *ErrorResource) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorResource.ProtoReflect.Descriptor instead.
func (*ErrorResource) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{1}
}

func (x *ErrorResource) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *ErrorResource) GetContents() string {
	if x != nil {
		return x.Contents
	}
	return ""
}

type Cluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                          string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Tenant                        string           `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	WorkingDir                    string           `protobuf:"bytes,3,opt,name=working_dir,json=workingDir,proto3" json:"working_dir,omitempty"`
	ServerIdList                  []string         `protobuf:"bytes,4,rep,name=server_id_list,json=dbServers,proto3" json:"server_id_list,omitempty"`
	ProxyIdList                   []string         `protobuf:"bytes,5,rep,name=proxy_id_list,json=proxyServers,proto3" json:"proxy_id_list,omitempty"`
	FailoverCtr                   int32            `protobuf:"varint,6,opt,name=failover_ctr,json=failoverCounter,proto3" json:"failover_ctr,omitempty"`
	FailoverTs                    int64            `protobuf:"varint,7,opt,name=failover_ts,json=failoverLastTime,proto3" json:"failover_ts,omitempty"`
	Status                        string           `protobuf:"bytes,8,opt,name=status,json=activePassiveStatus,proto3" json:"status,omitempty"`
	IsSplitBrain                  bool             `protobuf:"varint,9,opt,name=is_split_brain,json=isSplitBrain,proto3" json:"is_split_brain,omitempty"`
	IsFailedArbitrator            bool             `protobuf:"varint,10,opt,name=is_failed_arbitrator,json=isFailedArbitrator,proto3" json:"is_failed_arbitrator,omitempty"`
	IsLostMajority                bool             `protobuf:"varint,11,opt,name=is_lost_majority,json=isLostMajority,proto3" json:"is_lost_majority,omitempty"`
	IsDown                        bool             `protobuf:"varint,12,opt,name=is_down,json=isDown,proto3" json:"is_down,omitempty"`
	IsClusterDown                 bool             `protobuf:"varint,13,opt,name=is_cluster_down,json=isClusterDown,proto3" json:"is_cluster_down,omitempty"`
	IsAllDbUp                     bool             `protobuf:"varint,14,opt,name=is_all_db_up,json=isAllDbUp,proto3" json:"is_all_db_up,omitempty"`
	IsFailable                    bool             `protobuf:"varint,15,opt,name=is_failable,json=isFailable,proto3" json:"is_failable,omitempty"`
	IsPostgres                    bool             `protobuf:"varint,16,opt,name=is_postgres,json=isPostgres,proto3" json:"is_postgres,omitempty"`
	IsProvision                   bool             `protobuf:"varint,17,opt,name=is_provision,json=isProvision,proto3" json:"is_provision,omitempty"`
	IsNeedProxiesRestart          bool             `protobuf:"varint,18,opt,name=is_need_proxies_restart,json=isNeedProxyRestart,proto3" json:"is_need_proxies_restart,omitempty"`
	IsNeedProxiesReprov           bool             `protobuf:"varint,19,opt,name=is_need_proxies_reprov,json=isNeedProxiesRestart,proto3" json:"is_need_proxies_reprov,omitempty"`
	IsNeedDatabasesRestart        bool             `protobuf:"varint,20,opt,name=is_need_databases_restart,json=isNeedDatabasesRestart,proto3" json:"is_need_databases_restart,omitempty"`
	IsNeedDatabasesRollingRestart bool             `protobuf:"varint,21,opt,name=is_need_databases_rolling_restart,json=isNeedDatabasesRollingRestart,proto3" json:"is_need_databases_rolling_restart,omitempty"`
	IsNeedDatabasesRollingReprov  bool             `protobuf:"varint,22,opt,name=is_need_databases_rolling_reprov,json=isNeedDatabasesRollingReprov,proto3" json:"is_need_databases_rolling_reprov,omitempty"`
	IsNeedDatabasesReprov         bool             `protobuf:"varint,23,opt,name=is_need_databases_reprov,json=isNeedDatabasesReprov,proto3" json:"is_need_databases_reprov,omitempty"`
	IsValidBackup                 bool             `protobuf:"varint,24,opt,name=is_valid_backup,json=isValidBackup,proto3" json:"is_valid_backup,omitempty"`
	IsNotMonitoring               bool             `protobuf:"varint,25,opt,name=is_not_monitoring,json=isNotMonitoring,proto3" json:"is_not_monitoring,omitempty"`
	IsCapturing                   bool             `protobuf:"varint,26,opt,name=is_capturing,json=isCapturing,proto3" json:"is_capturing,omitempty"`
	CleanAll                      bool             `protobuf:"varint,27,opt,name=clean_all,json=cleanReplication,proto3" json:"clean_all,omitempty"`
	Topology                      string           `protobuf:"bytes,28,opt,name=topology,proto3" json:"topology,omitempty"`
	Uptime                        string           `protobuf:"bytes,29,opt,name=uptime,proto3" json:"uptime,omitempty"`
	UptimeFailable                string           `protobuf:"bytes,30,opt,name=uptime_failable,json=uptimeFailable,proto3" json:"uptime_failable,omitempty"`
	UptimeSemiSync                string           `protobuf:"bytes,31,opt,name=uptime_semi_sync,json=uptimeSemisync,proto3" json:"uptime_semi_sync,omitempty"`
	MonitorSpin                   string           `protobuf:"bytes,32,opt,name=monitor_spin,json=monitorSpin,proto3" json:"monitor_spin,omitempty"`
	DbTableSize                   int64            `protobuf:"varint,33,opt,name=db_table_size,json=dbTableSize,proto3" json:"db_table_size,omitempty"`
	DbIndexSize                   int64            `protobuf:"varint,34,opt,name=db_index_size,json=dbIndexSize,proto3" json:"db_index_size,omitempty"`
	Connections                   int32            `protobuf:"varint,35,opt,name=connections,proto3" json:"connections,omitempty"`
	Qps                           int64            `protobuf:"varint,36,opt,name=qps,proto3" json:"qps,omitempty"`
	HaveDbtlsCert                 bool             `protobuf:"varint,37,opt,name=have_dbtls_cert,json=haveDBTLSCert,proto3" json:"have_dbtls_cert,omitempty"`
	HaveDbtlsOldCert              bool             `protobuf:"varint,38,opt,name=have_dbtls_old_cert,json=haveDBTLSOldCert,proto3" json:"have_dbtls_old_cert,omitempty"`
	WaitingRejoin                 int32            `protobuf:"varint,39,opt,name=waiting_rejoin,json=waitingRejoin,proto3" json:"waiting_rejoin,omitempty"`
	WaitingSwitchover             int32            `protobuf:"varint,40,opt,name=waiting_switchover,json=waitingSwitchover,proto3" json:"waiting_switchover,omitempty"`
	WaitingFailover               int32            `protobuf:"varint,41,opt,name=waiting_failover,json=waitingFailover,proto3" json:"waiting_failover,omitempty"`
	Crashes                       []*Cluster_Crash `protobuf:"bytes,42,rep,name=crashes,json=dbServersCrashes,proto3" json:"crashes,omitempty"`
	// config.Config Conf = 43 [json_name="config"];
	// configurator.Configurator Configurator = 44 [json_name="configurator"];
	// []VariableDiff DiffVariables = 45 [json_name="diffVariables"];
	// s18log.HttpLog Log = 46 [json_name="log"];
	// map[string]*JobResult JobResults = 47 [json_name="jobResults"];
	// s18log.HttpLog SQLGeneralLog = 48 [json_name="sqlGeneralLog"];
	// s18log.HttpLog SQLErrorLog = 49 [json_name="sqlErrorLog"];
	MonitorType  map[string]string `protobuf:"bytes,50,rep,name=monitor_type,json=monitorType,proto3" json:"monitor_type,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TopologyType map[string]string `protobuf:"bytes,51,rep,name=topology_type,json=topologyType,proto3" json:"topology_type,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FsType       map[string]bool   `protobuf:"bytes,52,rep,name=fs_type,json=fsType,proto3" json:"fs_type,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	DiskType     map[string]string `protobuf:"bytes,53,rep,name=disk_type,json=diskType,proto3" json:"disk_type,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	VmType       map[string]bool   `protobuf:"bytes,54,rep,name=vm_type,json=vmType,proto3" json:"vm_type,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *Cluster) Reset() {
	*x = Cluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cluster) ProtoMessage() {}

func (x *Cluster) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cluster.ProtoReflect.Descriptor instead.
func (*Cluster) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{2}
}

func (x *Cluster) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Cluster) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *Cluster) GetWorkingDir() string {
	if x != nil {
		return x.WorkingDir
	}
	return ""
}

func (x *Cluster) GetServerIdList() []string {
	if x != nil {
		return x.ServerIdList
	}
	return nil
}

func (x *Cluster) GetProxyIdList() []string {
	if x != nil {
		return x.ProxyIdList
	}
	return nil
}

func (x *Cluster) GetFailoverCtr() int32 {
	if x != nil {
		return x.FailoverCtr
	}
	return 0
}

func (x *Cluster) GetFailoverTs() int64 {
	if x != nil {
		return x.FailoverTs
	}
	return 0
}

func (x *Cluster) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Cluster) GetIsSplitBrain() bool {
	if x != nil {
		return x.IsSplitBrain
	}
	return false
}

func (x *Cluster) GetIsFailedArbitrator() bool {
	if x != nil {
		return x.IsFailedArbitrator
	}
	return false
}

func (x *Cluster) GetIsLostMajority() bool {
	if x != nil {
		return x.IsLostMajority
	}
	return false
}

func (x *Cluster) GetIsDown() bool {
	if x != nil {
		return x.IsDown
	}
	return false
}

func (x *Cluster) GetIsClusterDown() bool {
	if x != nil {
		return x.IsClusterDown
	}
	return false
}

func (x *Cluster) GetIsAllDbUp() bool {
	if x != nil {
		return x.IsAllDbUp
	}
	return false
}

func (x *Cluster) GetIsFailable() bool {
	if x != nil {
		return x.IsFailable
	}
	return false
}

func (x *Cluster) GetIsPostgres() bool {
	if x != nil {
		return x.IsPostgres
	}
	return false
}

func (x *Cluster) GetIsProvision() bool {
	if x != nil {
		return x.IsProvision
	}
	return false
}

func (x *Cluster) GetIsNeedProxiesRestart() bool {
	if x != nil {
		return x.IsNeedProxiesRestart
	}
	return false
}

func (x *Cluster) GetIsNeedProxiesReprov() bool {
	if x != nil {
		return x.IsNeedProxiesReprov
	}
	return false
}

func (x *Cluster) GetIsNeedDatabasesRestart() bool {
	if x != nil {
		return x.IsNeedDatabasesRestart
	}
	return false
}

func (x *Cluster) GetIsNeedDatabasesRollingRestart() bool {
	if x != nil {
		return x.IsNeedDatabasesRollingRestart
	}
	return false
}

func (x *Cluster) GetIsNeedDatabasesRollingReprov() bool {
	if x != nil {
		return x.IsNeedDatabasesRollingReprov
	}
	return false
}

func (x *Cluster) GetIsNeedDatabasesReprov() bool {
	if x != nil {
		return x.IsNeedDatabasesReprov
	}
	return false
}

func (x *Cluster) GetIsValidBackup() bool {
	if x != nil {
		return x.IsValidBackup
	}
	return false
}

func (x *Cluster) GetIsNotMonitoring() bool {
	if x != nil {
		return x.IsNotMonitoring
	}
	return false
}

func (x *Cluster) GetIsCapturing() bool {
	if x != nil {
		return x.IsCapturing
	}
	return false
}

func (x *Cluster) GetCleanAll() bool {
	if x != nil {
		return x.CleanAll
	}
	return false
}

func (x *Cluster) GetTopology() string {
	if x != nil {
		return x.Topology
	}
	return ""
}

func (x *Cluster) GetUptime() string {
	if x != nil {
		return x.Uptime
	}
	return ""
}

func (x *Cluster) GetUptimeFailable() string {
	if x != nil {
		return x.UptimeFailable
	}
	return ""
}

func (x *Cluster) GetUptimeSemiSync() string {
	if x != nil {
		return x.UptimeSemiSync
	}
	return ""
}

func (x *Cluster) GetMonitorSpin() string {
	if x != nil {
		return x.MonitorSpin
	}
	return ""
}

func (x *Cluster) GetDbTableSize() int64 {
	if x != nil {
		return x.DbTableSize
	}
	return 0
}

func (x *Cluster) GetDbIndexSize() int64 {
	if x != nil {
		return x.DbIndexSize
	}
	return 0
}

func (x *Cluster) GetConnections() int32 {
	if x != nil {
		return x.Connections
	}
	return 0
}

func (x *Cluster) GetQps() int64 {
	if x != nil {
		return x.Qps
	}
	return 0
}

func (x *Cluster) GetHaveDbtlsCert() bool {
	if x != nil {
		return x.HaveDbtlsCert
	}
	return false
}

func (x *Cluster) GetHaveDbtlsOldCert() bool {
	if x != nil {
		return x.HaveDbtlsOldCert
	}
	return false
}

func (x *Cluster) GetWaitingRejoin() int32 {
	if x != nil {
		return x.WaitingRejoin
	}
	return 0
}

func (x *Cluster) GetWaitingSwitchover() int32 {
	if x != nil {
		return x.WaitingSwitchover
	}
	return 0
}

func (x *Cluster) GetWaitingFailover() int32 {
	if x != nil {
		return x.WaitingFailover
	}
	return 0
}

func (x *Cluster) GetCrashes() []*Cluster_Crash {
	if x != nil {
		return x.Crashes
	}
	return nil
}

func (x *Cluster) GetMonitorType() map[string]string {
	if x != nil {
		return x.MonitorType
	}
	return nil
}

func (x *Cluster) GetTopologyType() map[string]string {
	if x != nil {
		return x.TopologyType
	}
	return nil
}

func (x *Cluster) GetFsType() map[string]bool {
	if x != nil {
		return x.FsType
	}
	return nil
}

func (x *Cluster) GetDiskType() map[string]string {
	if x != nil {
		return x.DiskType
	}
	return nil
}

func (x *Cluster) GetVmType() map[string]bool {
	if x != nil {
		return x.VmType
	}
	return nil
}

type ClusterSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cluster  *Cluster                `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Action   ClusterSetting_Action   `protobuf:"varint,3,opt,name=action,proto3,enum=signal18.replication_manager.v3.ClusterSetting_Action" json:"action,omitempty"`
	TagValue string                  `protobuf:"bytes,4,opt,name=tag_value,json=tagValue,proto3" json:"tag_value,omitempty"`
	Setting  *ClusterSetting_Setting `protobuf:"bytes,5,opt,name=setting,proto3" json:"setting,omitempty"`
	Switch   *ClusterSetting_Switch  `protobuf:"bytes,6,opt,name=switch,proto3" json:"switch,omitempty"`
}

func (x *ClusterSetting) Reset() {
	*x = ClusterSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterSetting) ProtoMessage() {}

func (x *ClusterSetting) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterSetting.ProtoReflect.Descriptor instead.
func (*ClusterSetting) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{3}
}

func (x *ClusterSetting) GetCluster() *Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

func (x *ClusterSetting) GetAction() ClusterSetting_Action {
	if x != nil {
		return x.Action
	}
	return ClusterSetting_UNSPECIFIED
}

func (x *ClusterSetting) GetTagValue() string {
	if x != nil {
		return x.TagValue
	}
	return ""
}

func (x *ClusterSetting) GetSetting() *ClusterSetting_Setting {
	if x != nil {
		return x.Setting
	}
	return nil
}

func (x *ClusterSetting) GetSwitch() *ClusterSetting_Switch {
	if x != nil {
		return x.Switch
	}
	return nil
}

type ClusterAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cluster      *Cluster                          `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Action       ClusterAction_Action              `protobuf:"varint,3,opt,name=action,proto3,enum=signal18.replication_manager.v3.ClusterAction_Action" json:"action,omitempty"`
	Server       *ClusterAction_Server             `protobuf:"bytes,4,opt,name=server,proto3" json:"server,omitempty"`
	Topology     ClusterAction_ReplicationTopology `protobuf:"varint,5,opt,name=topology,proto3,enum=signal18.replication_manager.v3.ClusterAction_ReplicationTopology" json:"topology,omitempty"`
	ShardingName string                            `protobuf:"bytes,6,opt,name=sharding_name,json=shardingName,proto3" json:"sharding_name,omitempty"`
}

func (x *ClusterAction) Reset() {
	*x = ClusterAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterAction) ProtoMessage() {}

func (x *ClusterAction) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterAction.ProtoReflect.Descriptor instead.
func (*ClusterAction) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{4}
}

func (x *ClusterAction) GetCluster() *Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

func (x *ClusterAction) GetAction() ClusterAction_Action {
	if x != nil {
		return x.Action
	}
	return ClusterAction_ACTION_UNSPECIFIED
}

func (x *ClusterAction) GetServer() *ClusterAction_Server {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *ClusterAction) GetTopology() ClusterAction_ReplicationTopology {
	if x != nil {
		return x.Topology
	}
	return ClusterAction_RT_UNSPECIFIED
}

func (x *ClusterAction) GetShardingName() string {
	if x != nil {
		return x.ShardingName
	}
	return ""
}

type StatusMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alive ServiceStatus `protobuf:"varint,1,opt,name=alive,proto3,enum=signal18.replication_manager.v3.ServiceStatus" json:"alive,omitempty"`
}

func (x *StatusMessage) Reset() {
	*x = StatusMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusMessage) ProtoMessage() {}

func (x *StatusMessage) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusMessage.ProtoReflect.Descriptor instead.
func (*StatusMessage) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{5}
}

func (x *StatusMessage) GetAlive() ServiceStatus {
	if x != nil {
		return x.Alive
	}
	return ServiceStatus_SERVICESTATUS_UNSPECIFIED
}

type TopologyRetrieval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cluster  *Cluster                    `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Retrieve TopologyRetrieval_Retrieval `protobuf:"varint,2,opt,name=retrieve,proto3,enum=signal18.replication_manager.v3.TopologyRetrieval_Retrieval" json:"retrieve,omitempty"`
}

func (x *TopologyRetrieval) Reset() {
	*x = TopologyRetrieval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyRetrieval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyRetrieval) ProtoMessage() {}

func (x *TopologyRetrieval) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyRetrieval.ProtoReflect.Descriptor instead.
func (*TopologyRetrieval) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{6}
}

func (x *TopologyRetrieval) GetCluster() *Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

func (x *TopologyRetrieval) GetRetrieve() TopologyRetrieval_Retrieval {
	if x != nil {
		return x.Retrieve
	}
	return TopologyRetrieval_RETRIEVAL_UNSPECIFIED
}

type Certificate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientCertificate string `protobuf:"bytes,1,opt,name=client_certificate,json=clientCertificate,proto3" json:"client_certificate,omitempty"`
	ClientKey         string `protobuf:"bytes,2,opt,name=client_key,json=clientKey,proto3" json:"client_key,omitempty"`
	Authority         string `protobuf:"bytes,3,opt,name=authority,proto3" json:"authority,omitempty"`
}

func (x *Certificate) Reset() {
	*x = Certificate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Certificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Certificate) ProtoMessage() {}

func (x *Certificate) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Certificate.ProtoReflect.Descriptor instead.
func (*Certificate) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{7}
}

func (x *Certificate) GetClientCertificate() string {
	if x != nil {
		return x.ClientCertificate
	}
	return ""
}

func (x *Certificate) GetClientKey() string {
	if x != nil {
		return x.ClientKey
	}
	return ""
}

func (x *Certificate) GetAuthority() string {
	if x != nil {
		return x.Authority
	}
	return ""
}

type Backup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ShortId  string   `protobuf:"bytes,2,opt,name=short_id,proto3" json:"short_id,omitempty"`
	Time     string   `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
	Tree     string   `protobuf:"bytes,4,opt,name=tree,proto3" json:"tree,omitempty"`
	Paths    []string `protobuf:"bytes,5,rep,name=paths,proto3" json:"paths,omitempty"`
	Hostname string   `protobuf:"bytes,6,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Username string   `protobuf:"bytes,7,opt,name=username,proto3" json:"username,omitempty"`
	Uid      int64    `protobuf:"varint,8,opt,name=uid,proto3" json:"uid,omitempty"`
	Gid      int64    `protobuf:"varint,9,opt,name=gid,proto3" json:"gid,omitempty"`
}

func (x *Backup) Reset() {
	*x = Backup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Backup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Backup) ProtoMessage() {}

func (x *Backup) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Backup.ProtoReflect.Descriptor instead.
func (*Backup) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{8}
}

func (x *Backup) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Backup) GetShortId() string {
	if x != nil {
		return x.ShortId
	}
	return ""
}

func (x *Backup) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *Backup) GetTree() string {
	if x != nil {
		return x.Tree
	}
	return ""
}

func (x *Backup) GetPaths() []string {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *Backup) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *Backup) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Backup) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *Backup) GetGid() int64 {
	if x != nil {
		return x.Gid
	}
	return 0
}

type Tag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Category string `protobuf:"bytes,3,opt,name=category,proto3" json:"category,omitempty"`
}

func (x *Tag) Reset() {
	*x = Tag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tag) ProtoMessage() {}

func (x *Tag) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tag.ProtoReflect.Descriptor instead.
func (*Tag) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{9}
}

func (x *Tag) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Tag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Tag) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

type TableAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cluster      *Cluster           `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Table        *Table             `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`
	Action       TableAction_Action `protobuf:"varint,3,opt,name=action,proto3,enum=signal18.replication_manager.v3.TableAction_Action" json:"action,omitempty"`
	ClusterShard string             `protobuf:"bytes,4,opt,name=cluster_shard,json=clusterShard,proto3" json:"cluster_shard,omitempty"`
	ClusterList  string             `protobuf:"bytes,5,opt,name=cluster_list,json=clusterList,proto3" json:"cluster_list,omitempty"`
}

func (x *TableAction) Reset() {
	*x = TableAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableAction) ProtoMessage() {}

func (x *TableAction) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableAction.ProtoReflect.Descriptor instead.
func (*TableAction) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{10}
}

func (x *TableAction) GetCluster() *Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

func (x *TableAction) GetTable() *Table {
	if x != nil {
		return x.Table
	}
	return nil
}

func (x *TableAction) GetAction() TableAction_Action {
	if x != nil {
		return x.Action
	}
	return TableAction_ACTION_UNSPECIFIED
}

func (x *TableAction) GetClusterShard() string {
	if x != nil {
		return x.ClusterShard
	}
	return ""
}

func (x *TableAction) GetClusterList() string {
	if x != nil {
		return x.ClusterList
	}
	return ""
}

type Table struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableSchema   string `protobuf:"bytes,1,opt,name=table_schema,json=tableSchema,proto3" json:"table_schema,omitempty"`
	TableName     string `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	Engine        string `protobuf:"bytes,3,opt,name=engine,proto3" json:"engine,omitempty"`
	TableRows     int64  `protobuf:"varint,4,opt,name=table_rows,json=tableRows,proto3" json:"table_rows,omitempty"`
	DataLength    int64  `protobuf:"varint,5,opt,name=data_length,json=dataLength,proto3" json:"data_length,omitempty"`
	IndexLength   int64  `protobuf:"varint,6,opt,name=index_length,json=indexLength,proto3" json:"index_length,omitempty"`
	TableCrc      uint64 `protobuf:"varint,7,opt,name=table_crc,json=tableCrc,proto3" json:"table_crc,omitempty"`
	TableClusters string `protobuf:"bytes,8,opt,name=table_clusters,json=tableClusters,proto3" json:"table_clusters,omitempty"`
	TableSync     string `protobuf:"bytes,9,opt,name=table_sync,json=tableSync,proto3" json:"table_sync,omitempty"`
}

func (x *Table) Reset() {
	*x = Table{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Table) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Table) ProtoMessage() {}

func (x *Table) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Table.ProtoReflect.Descriptor instead.
func (*Table) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{11}
}

func (x *Table) GetTableSchema() string {
	if x != nil {
		return x.TableSchema
	}
	return ""
}

func (x *Table) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *Table) GetEngine() string {
	if x != nil {
		return x.Engine
	}
	return ""
}

func (x *Table) GetTableRows() int64 {
	if x != nil {
		return x.TableRows
	}
	return 0
}

func (x *Table) GetDataLength() int64 {
	if x != nil {
		return x.DataLength
	}
	return 0
}

func (x *Table) GetIndexLength() int64 {
	if x != nil {
		return x.IndexLength
	}
	return 0
}

func (x *Table) GetTableCrc() uint64 {
	if x != nil {
		return x.TableCrc
	}
	return 0
}

func (x *Table) GetTableClusters() string {
	if x != nil {
		return x.TableClusters
	}
	return ""
}

func (x *Table) GetTableSync() string {
	if x != nil {
		return x.TableSync
	}
	return ""
}

type ClusterTest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cluster     *Cluster         `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	TestName    ClusterTest_Test `protobuf:"varint,2,opt,name=test_name,json=testName,proto3,enum=signal18.replication_manager.v3.ClusterTest_Test" json:"test_name,omitempty"`
	Provision   bool             `protobuf:"varint,3,opt,name=provision,proto3" json:"provision,omitempty"`
	Unprovision bool             `protobuf:"varint,4,opt,name=unprovision,proto3" json:"unprovision,omitempty"`
}

func (x *ClusterTest) Reset() {
	*x = ClusterTest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterTest) ProtoMessage() {}

func (x *ClusterTest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterTest.ProtoReflect.Descriptor instead.
func (*ClusterTest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{12}
}

func (x *ClusterTest) GetCluster() *Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

func (x *ClusterTest) GetTestName() ClusterTest_Test {
	if x != nil {
		return x.TestName
	}
	return ClusterTest_Unspecified
}

func (x *ClusterTest) GetProvision() bool {
	if x != nil {
		return x.Provision
	}
	return false
}

func (x *ClusterTest) GetUnprovision() bool {
	if x != nil {
		return x.Unprovision
	}
	return false
}

type Cluster_Crash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url                         string       `protobuf:"bytes,1,opt,name=url,json=URL,proto3" json:"url,omitempty"`
	FailoverMasterLogFile       string       `protobuf:"bytes,2,opt,name=failover_master_log_file,json=FailoverMasterLogFile,proto3" json:"failover_master_log_file,omitempty"`
	FailoverMasterLogPos        string       `protobuf:"bytes,3,opt,name=failover_master_log_pos,json=FailoverMasterLogPos,proto3" json:"failover_master_log_pos,omitempty"`
	NewMasterLogFile            string       `protobuf:"bytes,4,opt,name=new_master_log_file,json=NewMasterLogFile,proto3" json:"new_master_log_file,omitempty"`
	NewMasterLogPos             string       `protobuf:"bytes,5,opt,name=new_master_log_pos,json=NewMasterLogPos,proto3" json:"new_master_log_pos,omitempty"`
	FailoverSemiSyncSlaveStatus bool         `protobuf:"varint,6,opt,name=failover_semi_sync_slave_status,json=FailoverSemiSyncSlaveStatus,proto3" json:"failover_semi_sync_slave_status,omitempty"`
	FailoverIoGtids             []*gtid.Gtid `protobuf:"bytes,7,rep,name=failover_io_gtids,json=FailoverIOGtid,proto3" json:"failover_io_gtids,omitempty"`
	ElectedMasterUrl            string       `protobuf:"bytes,8,opt,name=elected_master_url,json=ElectedMasterURL,proto3" json:"elected_master_url,omitempty"`
}

func (x *Cluster_Crash) Reset() {
	*x = Cluster_Crash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cluster_Crash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cluster_Crash) ProtoMessage() {}

func (x *Cluster_Crash) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cluster_Crash.ProtoReflect.Descriptor instead.
func (*Cluster_Crash) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{2, 0}
}

func (x *Cluster_Crash) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Cluster_Crash) GetFailoverMasterLogFile() string {
	if x != nil {
		return x.FailoverMasterLogFile
	}
	return ""
}

func (x *Cluster_Crash) GetFailoverMasterLogPos() string {
	if x != nil {
		return x.FailoverMasterLogPos
	}
	return ""
}

func (x *Cluster_Crash) GetNewMasterLogFile() string {
	if x != nil {
		return x.NewMasterLogFile
	}
	return ""
}

func (x *Cluster_Crash) GetNewMasterLogPos() string {
	if x != nil {
		return x.NewMasterLogPos
	}
	return ""
}

func (x *Cluster_Crash) GetFailoverSemiSyncSlaveStatus() bool {
	if x != nil {
		return x.FailoverSemiSyncSlaveStatus
	}
	return false
}

func (x *Cluster_Crash) GetFailoverIoGtids() []*gtid.Gtid {
	if x != nil {
		return x.FailoverIoGtids
	}
	return nil
}

func (x *Cluster_Crash) GetElectedMasterUrl() string {
	if x != nil {
		return x.ElectedMasterUrl
	}
	return ""
}

type ClusterSetting_Setting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  ClusterSetting_Setting_SettingName `protobuf:"varint,1,opt,name=name,proto3,enum=signal18.replication_manager.v3.ClusterSetting_Setting_SettingName" json:"name,omitempty"`
	Value string                             `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ClusterSetting_Setting) Reset() {
	*x = ClusterSetting_Setting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterSetting_Setting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterSetting_Setting) ProtoMessage() {}

func (x *ClusterSetting_Setting) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterSetting_Setting.ProtoReflect.Descriptor instead.
func (*ClusterSetting_Setting) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{3, 0}
}

func (x *ClusterSetting_Setting) GetName() ClusterSetting_Setting_SettingName {
	if x != nil {
		return x.Name
	}
	return ClusterSetting_Setting_UNSPECIFIED
}

func (x *ClusterSetting_Setting) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type ClusterSetting_Switch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name ClusterSetting_Switch_SwitchName `protobuf:"varint,1,opt,name=name,proto3,enum=signal18.replication_manager.v3.ClusterSetting_Switch_SwitchName" json:"name,omitempty"`
}

func (x *ClusterSetting_Switch) Reset() {
	*x = ClusterSetting_Switch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterSetting_Switch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterSetting_Switch) ProtoMessage() {}

func (x *ClusterSetting_Switch) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterSetting_Switch.ProtoReflect.Descriptor instead.
func (*ClusterSetting_Switch) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{3, 1}
}

func (x *ClusterSetting_Switch) GetName() ClusterSetting_Switch_SwitchName {
	if x != nil {
		return x.Name
	}
	return ClusterSetting_Switch_UNSPECIFIED
}

type ClusterAction_Server struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host     string                        `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port     uint64                        `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Type     ClusterAction_Server_Type     `protobuf:"varint,3,opt,name=type,proto3,enum=signal18.replication_manager.v3.ClusterAction_Server_Type" json:"type,omitempty"`
	Database ClusterAction_Server_Database `protobuf:"varint,4,opt,name=database,proto3,enum=signal18.replication_manager.v3.ClusterAction_Server_Database" json:"database,omitempty"`
	Proxy    ClusterAction_Server_Proxy    `protobuf:"varint,5,opt,name=proxy,proto3,enum=signal18.replication_manager.v3.ClusterAction_Server_Proxy" json:"proxy,omitempty"`
}

func (x *ClusterAction_Server) Reset() {
	*x = ClusterAction_Server{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterAction_Server) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterAction_Server) ProtoMessage() {}

func (x *ClusterAction_Server) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterAction_Server.ProtoReflect.Descriptor instead.
func (*ClusterAction_Server) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{4, 0}
}

func (x *ClusterAction_Server) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *ClusterAction_Server) GetPort() uint64 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *ClusterAction_Server) GetType() ClusterAction_Server_Type {
	if x != nil {
		return x.Type
	}
	return ClusterAction_Server_TYPE_UNSPECIFIED
}

func (x *ClusterAction_Server) GetDatabase() ClusterAction_Server_Database {
	if x != nil {
		return x.Database
	}
	return ClusterAction_Server_DATABASE_UNSPECIFIED
}

func (x *ClusterAction_Server) GetProxy() ClusterAction_Server_Proxy {
	if x != nil {
		return x.Proxy
	}
	return ClusterAction_Server_PROXY_UNSPECIFIED
}

var File_messages_proto protoreflect.FileDescriptor

var file_messages_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x1f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x31, 0x38, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x33, 0x1a, 0x0a, 0x67, 0x74, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6f, 0x0a,
	0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x31, 0x38, 0x2e,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x41,
	0x0a, 0x0d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x73, 0x22, 0xcc, 0x16, 0x0a, 0x07, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x12, 0x21, 0x0a, 0x0e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x64, 0x62, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x12, 0x25, 0x0a, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x63,
	0x74, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x66, 0x61, 0x69, 0x6c, 0x6f, 0x76,
	0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0b, 0x66, 0x61, 0x69,
	0x6c, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x66, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x23, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x73, 0x70, 0x6c, 0x69,
	0x74, 0x5f, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69,
	0x73, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x42, 0x72, 0x61, 0x69, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x69,
	0x73, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x61, 0x72, 0x62, 0x69, 0x74, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x73, 0x46, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x41, 0x72, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x28, 0x0a,
	0x10, 0x69, 0x73, 0x5f, 0x6c, 0x6f, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x4c, 0x6f, 0x73, 0x74, 0x4d,
	0x61, 0x6a, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x64, 0x6f,
	0x77, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x44, 0x6f, 0x77, 0x6e,
	0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x64,
	0x6f, 0x77, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x12, 0x1f, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x61,
	0x6c, 0x6c, 0x5f, 0x64, 0x62, 0x5f, 0x75, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x69, 0x73, 0x41, 0x6c, 0x6c, 0x44, 0x62, 0x55, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f,
	0x66, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x69, 0x73, 0x46, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73,
	0x5f, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x69, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69,
	0x73, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33,
	0x0a, 0x17, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65,
	0x73, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x69, 0x73, 0x4e, 0x65, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x70,
	0x72, 0x6f, 0x78, 0x69, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x4e, 0x65, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x78, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x39, 0x0a, 0x19, 0x69, 0x73, 0x5f,
	0x6e, 0x65, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x5f, 0x72,
	0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x69, 0x73,
	0x4e, 0x65, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x48, 0x0a, 0x21, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x65, 0x64, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x1d, 0x69, 0x73, 0x4e, 0x65, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73,
	0x52, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x46,
	0x0a, 0x20, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x73, 0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x70, 0x72,
	0x6f, 0x76, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x69, 0x73, 0x4e, 0x65, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x52, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x12, 0x37, 0x0a, 0x18, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x65,
	0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x72,
	0x6f, 0x76, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x69, 0x73, 0x4e, 0x65, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x12,
	0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x62, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x6e, 0x6f,
	0x74, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x4e, 0x6f, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72,
	0x69, 0x6e, 0x67, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x43, 0x61, 0x70,
	0x74, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x09, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x5f,
	0x61, 0x6c, 0x6c, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x63, 0x6c, 0x65, 0x61, 0x6e,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x74,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65,
	0x46, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x70, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x73, 0x65, 0x6d, 0x69, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x6d, 0x69, 0x73, 0x79,
	0x6e, 0x63, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x70,
	0x69, 0x6e, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x53, 0x70, 0x69, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x62, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64, 0x62,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x62, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x64, 0x62, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x10, 0x0a, 0x03, 0x71, 0x70, 0x73, 0x18, 0x24, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x71, 0x70,
	0x73, 0x12, 0x26, 0x0a, 0x0f, 0x68, 0x61, 0x76, 0x65, 0x5f, 0x64, 0x62, 0x74, 0x6c, 0x73, 0x5f,
	0x63, 0x65, 0x72, 0x74, 0x18, 0x25, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x68, 0x61, 0x76, 0x65,
	0x44, 0x42, 0x54, 0x4c, 0x53, 0x43, 0x65, 0x72, 0x74, 0x12, 0x2d, 0x0a, 0x13, 0x68, 0x61, 0x76,
	0x65, 0x5f, 0x64, 0x62, 0x74, 0x6c, 0x73, 0x5f, 0x6f, 0x6c, 0x64, 0x5f, 0x63, 0x65, 0x72, 0x74,
	0x18, 0x26, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x68, 0x61, 0x76, 0x65, 0x44, 0x42, 0x54, 0x4c,
	0x53, 0x4f, 0x6c, 0x64, 0x43, 0x65, 0x72, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x69, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x6a, 0x6f, 0x69, 0x6e, 0x18, 0x27, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x6a, 0x6f, 0x69, 0x6e, 0x12,
	0x2d, 0x0a, 0x12, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x28, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x77, 0x61, 0x69,
	0x74, 0x69, 0x6e, 0x67, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x29,
	0x0a, 0x10, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x6f, 0x76,
	0x65, 0x72, 0x18, 0x29, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e,
	0x67, 0x46, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x07, 0x63, 0x72, 0x61,
	0x73, 0x68, 0x65, 0x73, 0x18, 0x2a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x31, 0x38, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x61, 0x73, 0x68, 0x52, 0x10, 0x64, 0x62, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x43, 0x72, 0x61, 0x73, 0x68, 0x65, 0x73, 0x12, 0x5c, 0x0a, 0x0c,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x32, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x39, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x31, 0x38, 0x2e, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5f, 0x0a, 0x0d, 0x74, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x33, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3a, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x31, 0x38, 0x2e, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x33, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x74,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4d, 0x0a, 0x07, 0x66,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x34, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x31, 0x38, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x46, 0x73, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x66, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x53, 0x0a, 0x09, 0x64, 0x69,
	0x73, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x35, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x31, 0x38, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x64, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x4d, 0x0a, 0x07, 0x76, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x36, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x31, 0x38, 0x2e, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x76, 0x33, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x56, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x76, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x1a, 0xab,
	0x03, 0x0a, 0x05, 0x43, 0x72, 0x61, 0x73, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x52, 0x4c, 0x12, 0x37, 0x0a, 0x18, 0x66, 0x61,
	0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x6f,
	0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x46, 0x61,
	0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x46,
	0x69, 0x6c, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x66, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x5f,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x70, 0x6f, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x46, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x4d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x50, 0x6f, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x6e, 0x65,
	0x77, 0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x4e, 0x65, 0x77, 0x4d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x4c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x12, 0x6e, 0x65, 0x77,
	0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x70, 0x6f, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4e, 0x65, 0x77, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x4c, 0x6f, 0x67, 0x50, 0x6f, 0x73, 0x12, 0x44, 0x0a, 0x1f, 0x66, 0x61, 0x69, 0x6c, 0x6f, 0x76,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x6d, 0x69, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x73, 0x6c, 0x61,
	0x76, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x1b, 0x46, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x65, 0x6d, 0x69, 0x53, 0x79, 0x6e,
	0x63, 0x53, 0x6c, 0x61, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x50, 0x0a, 0x11,
	0x66, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x6f, 0x5f, 0x67, 0x74, 0x69, 0x64,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x31, 0x38, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x74, 0x69, 0x64, 0x52, 0x0e,
	0x46, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x4f, 0x47, 0x74, 0x69, 0x64, 0x12, 0x2c,
	0x0a, 0x12, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x45, 0x6c, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x55, 0x52, 0x4c, 0x1a, 0x3e, 0x0a, 0x10,
	0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11,
	0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a,
	0x0b, 0x46, 0x73, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x44, 0x69, 0x73, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x56, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xe3, 0x20, 0x0a, 0x0e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x42, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x31, 0x38, 0x2e,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x07,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x31, 0x38, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x67, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x51, 0x0a, 0x07, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x31, 0x38,
	0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x07,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x4e, 0x0a, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x31, 0x38, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52,
	0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x1a, 0xd6, 0x0e, 0x0a, 0x07, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x57, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x43, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x31, 0x38, 0x2e, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x33, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xdb, 0x0d, 0x0a, 0x0b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x41, 0x43, 0x4b, 0x55, 0x50, 0x5f, 0x42, 0x49,
	0x4e, 0x4c, 0x4f, 0x47, 0x53, 0x5f, 0x4b, 0x45, 0x45, 0x50, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11,
	0x42, 0x41, 0x43, 0x4b, 0x55, 0x50, 0x5f, 0x4b, 0x45, 0x45, 0x50, 0x5f, 0x44, 0x41, 0x49, 0x4c,
	0x59, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x41, 0x43, 0x4b, 0x55, 0x50, 0x5f, 0x4b, 0x45,
	0x45, 0x50, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0x4c, 0x59, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x42,
	0x41, 0x43, 0x4b, 0x55, 0x50, 0x5f, 0x4b, 0x45, 0x45, 0x50, 0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48,
	0x4c, 0x59, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x41, 0x43, 0x4b, 0x55, 0x50, 0x5f, 0x4b,
	0x45, 0x45, 0x50, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x4c, 0x59, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12,
	0x42, 0x41, 0x43, 0x4b, 0x55, 0x50, 0x5f, 0x4b, 0x45, 0x45, 0x50, 0x5f, 0x59, 0x45, 0x41, 0x52,
	0x4c, 0x59, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x41, 0x43, 0x4b, 0x55, 0x50, 0x5f, 0x4c,
	0x4f, 0x47, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x07, 0x12, 0x18, 0x0a,
	0x14, 0x42, 0x41, 0x43, 0x4b, 0x55, 0x50, 0x5f, 0x50, 0x48, 0x59, 0x53, 0x49, 0x43, 0x41, 0x4c,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x08, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x42, 0x5f, 0x53, 0x45,
	0x52, 0x56, 0x45, 0x52, 0x53, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c,
	0x10, 0x09, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x42, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x53,
	0x5f, 0x48, 0x4f, 0x53, 0x54, 0x53, 0x10, 0x0a, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x41, 0x49, 0x4c,
	0x4f, 0x56, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x0b, 0x12, 0x1c, 0x0a, 0x18,
	0x46, 0x41, 0x49, 0x4c, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x53, 0x4c, 0x41,
	0x56, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x10, 0x0c, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x41,
	0x58, 0x53, 0x43, 0x41, 0x4c, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x53, 0x5f, 0x43,
	0x52, 0x45, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x0d, 0x12, 0x16, 0x0a, 0x12, 0x4d,
	0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53,
	0x53, 0x10, 0x0e, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x52, 0x4f, 0x56, 0x5f, 0x44, 0x42, 0x5f, 0x41,
	0x47, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x0f, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x52, 0x4f, 0x56, 0x5f,
	0x44, 0x42, 0x5f, 0x43, 0x50, 0x55, 0x5f, 0x43, 0x4f, 0x52, 0x45, 0x53, 0x10, 0x10, 0x12, 0x17,
	0x0a, 0x13, 0x50, 0x52, 0x4f, 0x56, 0x5f, 0x44, 0x42, 0x5f, 0x44, 0x49, 0x53, 0x4b, 0x5f, 0x44,
	0x45, 0x56, 0x49, 0x43, 0x45, 0x10, 0x11, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x52, 0x4f, 0x56, 0x5f,
	0x44, 0x42, 0x5f, 0x44, 0x49, 0x53, 0x4b, 0x5f, 0x46, 0x53, 0x10, 0x12, 0x12, 0x15, 0x0a, 0x11,
	0x50, 0x52, 0x4f, 0x56, 0x5f, 0x44, 0x42, 0x5f, 0x44, 0x49, 0x53, 0x4b, 0x5f, 0x49, 0x4f, 0x50,
	0x53, 0x10, 0x13, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x52, 0x4f, 0x56, 0x5f, 0x44, 0x42, 0x5f, 0x44,
	0x49, 0x53, 0x4b, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x10, 0x14, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x52,
	0x4f, 0x56, 0x5f, 0x44, 0x42, 0x5f, 0x44, 0x49, 0x53, 0x4b, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x10,
	0x15, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x52, 0x4f, 0x56, 0x5f, 0x44, 0x42, 0x5f, 0x44, 0x49, 0x53,
	0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x16, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x52, 0x4f, 0x56,
	0x5f, 0x44, 0x42, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x44,
	0x41, 0x59, 0x53, 0x10, 0x17, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x52, 0x4f, 0x56, 0x5f, 0x44, 0x42,
	0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x18, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x52, 0x4f, 0x56,
	0x5f, 0x44, 0x42, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x53, 0x10, 0x19, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x52, 0x4f, 0x56, 0x5f, 0x44, 0x42,
	0x5f, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x10, 0x1a, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52, 0x4f,
	0x56, 0x5f, 0x44, 0x42, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x10, 0x1b, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52, 0x4f, 0x56, 0x5f, 0x4e, 0x45, 0x54, 0x5f,
	0x43, 0x4e, 0x49, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x10, 0x1c, 0x12, 0x1d, 0x0a,
	0x19, 0x50, 0x52, 0x4f, 0x56, 0x5f, 0x4f, 0x52, 0x43, 0x48, 0x45, 0x53, 0x54, 0x52, 0x41, 0x54,
	0x4f, 0x52, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x10, 0x1d, 0x12, 0x15, 0x0a, 0x11,
	0x50, 0x52, 0x4f, 0x56, 0x5f, 0x4f, 0x52, 0x43, 0x48, 0x45, 0x53, 0x54, 0x52, 0x41, 0x54, 0x4f,
	0x52, 0x10, 0x1e, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x52, 0x4f, 0x56, 0x5f, 0x50, 0x52, 0x4f, 0x58,
	0x59, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x1f, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52,
	0x4f, 0x56, 0x5f, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x5f, 0x43, 0x50, 0x55, 0x5f, 0x43, 0x4f, 0x52,
	0x45, 0x53, 0x10, 0x20, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x52, 0x4f, 0x56, 0x5f, 0x50, 0x52, 0x4f,
	0x58, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x4b, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x10, 0x21,
	0x12, 0x16, 0x0a, 0x12, 0x50, 0x52, 0x4f, 0x56, 0x5f, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x5f, 0x44,
	0x49, 0x53, 0x4b, 0x5f, 0x46, 0x53, 0x10, 0x22, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52, 0x4f, 0x56,
	0x5f, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x4b, 0x5f, 0x50, 0x4f, 0x4f, 0x4c,
	0x10, 0x23, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52, 0x4f, 0x56, 0x5f, 0x50, 0x52, 0x4f, 0x58, 0x59,
	0x5f, 0x44, 0x49, 0x53, 0x4b, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x10, 0x24, 0x12, 0x18, 0x0a, 0x14,
	0x50, 0x52, 0x4f, 0x56, 0x5f, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x4b, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x10, 0x25, 0x12, 0x21, 0x0a, 0x1d, 0x50, 0x52, 0x4f, 0x56, 0x5f, 0x50,
	0x52, 0x4f, 0x58, 0x59, 0x5f, 0x44, 0x4f, 0x43, 0x4b, 0x45, 0x52, 0x5f, 0x48, 0x41, 0x50, 0x52,
	0x4f, 0x58, 0x59, 0x5f, 0x49, 0x4d, 0x47, 0x10, 0x26, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x52, 0x4f,
	0x56, 0x5f, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x5f, 0x44, 0x4f, 0x43, 0x4b, 0x45, 0x52, 0x5f, 0x4d,
	0x41, 0x58, 0x53, 0x43, 0x41, 0x4c, 0x45, 0x5f, 0x49, 0x4d, 0x47, 0x10, 0x27, 0x12, 0x22, 0x0a,
	0x1e, 0x50, 0x52, 0x4f, 0x56, 0x5f, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x5f, 0x44, 0x4f, 0x43, 0x4b,
	0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x53, 0x51, 0x4c, 0x5f, 0x49, 0x4d, 0x47, 0x10,
	0x2f, 0x12, 0x24, 0x0a, 0x20, 0x50, 0x52, 0x4f, 0x56, 0x5f, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x5f,
	0x44, 0x4f, 0x43, 0x4b, 0x45, 0x52, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x44, 0x50, 0x52, 0x4f, 0x58,
	0x59, 0x5f, 0x49, 0x4d, 0x47, 0x10, 0x30, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x52, 0x4f, 0x56, 0x5f,
	0x50, 0x52, 0x4f, 0x58, 0x59, 0x5f, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x10, 0x31, 0x12, 0x1b,
	0x0a, 0x17, 0x50, 0x52, 0x4f, 0x56, 0x5f, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x5f, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x32, 0x12, 0x15, 0x0a, 0x11, 0x50,
	0x52, 0x4f, 0x56, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x4e,
	0x10, 0x33, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x52, 0x4f, 0x56, 0x5f, 0x53, 0x50, 0x48, 0x49, 0x4e,
	0x58, 0x5f, 0x49, 0x4d, 0x47, 0x10, 0x34, 0x12, 0x29, 0x0a, 0x25, 0x50, 0x52, 0x4f, 0x58, 0x59,
	0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x53, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x45, 0x4e, 0x44,
	0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53,
	0x10, 0x35, 0x12, 0x2d, 0x0a, 0x29, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x5f, 0x53, 0x45, 0x52, 0x56,
	0x45, 0x52, 0x53, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x45, 0x4e, 0x44, 0x5f, 0x4d, 0x41, 0x58, 0x5f,
	0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x41, 0x47, 0x10,
	0x36, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x53, 0x51, 0x4c, 0x5f, 0x53, 0x45,
	0x52, 0x56, 0x45, 0x52, 0x53, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c,
	0x10, 0x37, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x38, 0x12, 0x2c,
	0x0a, 0x28, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x52, 0x5f, 0x44, 0x42, 0x5f, 0x53,
	0x45, 0x52, 0x56, 0x45, 0x52, 0x53, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x42,
	0x41, 0x43, 0x4b, 0x55, 0x50, 0x5f, 0x43, 0x52, 0x4f, 0x4e, 0x10, 0x39, 0x12, 0x22, 0x0a, 0x1e,
	0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x52, 0x5f, 0x44, 0x42, 0x5f, 0x53, 0x45, 0x52,
	0x56, 0x45, 0x52, 0x53, 0x5f, 0x4c, 0x4f, 0x47, 0x53, 0x5f, 0x43, 0x52, 0x4f, 0x4e, 0x10, 0x3a,
	0x12, 0x2f, 0x0a, 0x2b, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x52, 0x5f, 0x44, 0x42,
	0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x53, 0x5f, 0x4c, 0x4f, 0x47, 0x53, 0x5f, 0x54, 0x41,
	0x42, 0x4c, 0x45, 0x5f, 0x52, 0x4f, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x52, 0x4f, 0x4e, 0x10,
	0x3b, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x52, 0x5f, 0x44,
	0x42, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x53, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4d, 0x49,
	0x5a, 0x45, 0x5f, 0x43, 0x52, 0x4f, 0x4e, 0x10, 0x3c, 0x12, 0x2d, 0x0a, 0x29, 0x53, 0x43, 0x48,
	0x45, 0x44, 0x55, 0x4c, 0x45, 0x52, 0x5f, 0x44, 0x42, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52,
	0x53, 0x5f, 0x50, 0x48, 0x59, 0x53, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x55,
	0x50, 0x5f, 0x43, 0x52, 0x4f, 0x4e, 0x10, 0x3d, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x43, 0x48, 0x45,
	0x44, 0x55, 0x4c, 0x45, 0x52, 0x5f, 0x4a, 0x4f, 0x42, 0x53, 0x5f, 0x53, 0x53, 0x48, 0x5f, 0x43,
	0x52, 0x4f, 0x4e, 0x10, 0x3e, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c,
	0x45, 0x52, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x50, 0x52, 0x4f,
	0x56, 0x5f, 0x43, 0x52, 0x4f, 0x4e, 0x10, 0x3f, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x43, 0x48, 0x45,
	0x44, 0x55, 0x4c, 0x45, 0x52, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45,
	0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x43, 0x52, 0x4f, 0x4e, 0x10, 0x40, 0x12, 0x1d, 0x0a, 0x19,
	0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x52, 0x5f, 0x53, 0x4c, 0x41, 0x5f, 0x52, 0x4f,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x52, 0x4f, 0x4e, 0x10, 0x41, 0x12, 0x21, 0x0a, 0x1d, 0x53,
	0x48, 0x41, 0x52, 0x44, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52,
	0x53, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x42, 0x12, 0x20,
	0x0a, 0x1c, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x57, 0x41, 0x49,
	0x54, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x43,
	0x1a, 0xf6, 0x0d, 0x0a, 0x06, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x55, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x31, 0x38, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x94, 0x0d, 0x0a, 0x0a, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x55, 0x54, 0x4f, 0x52, 0x45, 0x4a, 0x4f, 0x49, 0x4e,
	0x5f, 0x42, 0x41, 0x43, 0x4b, 0x55, 0x50, 0x5f, 0x42, 0x49, 0x4e, 0x4c, 0x4f, 0x47, 0x10, 0x01,
	0x12, 0x20, 0x0a, 0x1c, 0x41, 0x55, 0x54, 0x4f, 0x52, 0x45, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x46,
	0x4c, 0x41, 0x53, 0x48, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x4f, 0x4e, 0x5f, 0x53, 0x59, 0x4e, 0x43,
	0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x55, 0x54, 0x4f, 0x52, 0x45, 0x4a, 0x4f, 0x49, 0x4e,
	0x5f, 0x46, 0x4c, 0x41, 0x53, 0x48, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x4f, 0x4e, 0x5f, 0x55, 0x4e,
	0x53, 0x59, 0x4e, 0x43, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x55, 0x54, 0x4f, 0x52, 0x45,
	0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x46, 0x4c, 0x41, 0x53, 0x48, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x04,
	0x12, 0x1d, 0x0a, 0x19, 0x41, 0x55, 0x54, 0x4f, 0x52, 0x45, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x4c,
	0x4f, 0x47, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x55, 0x50, 0x10, 0x05, 0x12,
	0x18, 0x0a, 0x14, 0x41, 0x55, 0x54, 0x4f, 0x52, 0x45, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x4d, 0x59,
	0x53, 0x51, 0x4c, 0x44, 0x55, 0x4d, 0x50, 0x10, 0x06, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x55, 0x54,
	0x4f, 0x52, 0x45, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x50, 0x48, 0x59, 0x53, 0x49, 0x43, 0x41, 0x4c,
	0x5f, 0x42, 0x41, 0x43, 0x4b, 0x55, 0x50, 0x10, 0x07, 0x12, 0x29, 0x0a, 0x25, 0x41, 0x55, 0x54,
	0x4f, 0x52, 0x45, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x53, 0x4c, 0x41, 0x56, 0x45, 0x5f, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x48, 0x45, 0x41, 0x52, 0x54, 0x42, 0x45,
	0x41, 0x54, 0x10, 0x08, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x55, 0x54, 0x4f, 0x52, 0x45, 0x4a, 0x4f,
	0x49, 0x4e, 0x5f, 0x5a, 0x46, 0x53, 0x5f, 0x46, 0x4c, 0x41, 0x53, 0x48, 0x42, 0x41, 0x43, 0x4b,
	0x10, 0x09, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x55, 0x54, 0x4f, 0x52, 0x45, 0x4a, 0x4f, 0x49, 0x4e,
	0x10, 0x0a, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x55, 0x54, 0x4f, 0x53, 0x45, 0x45, 0x44, 0x10, 0x0b,
	0x12, 0x12, 0x0a, 0x0e, 0x42, 0x41, 0x43, 0x4b, 0x55, 0x50, 0x5f, 0x42, 0x49, 0x4e, 0x4c, 0x4f,
	0x47, 0x53, 0x10, 0x0c, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x41, 0x43, 0x4b, 0x55, 0x50, 0x5f, 0x52,
	0x45, 0x53, 0x54, 0x49, 0x43, 0x10, 0x0d, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x48, 0x45, 0x43, 0x4b,
	0x5f, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4c,
	0x54, 0x45, 0x52, 0x53, 0x10, 0x0e, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f,
	0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x10, 0x0f, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f,
	0x48, 0x45, 0x41, 0x52, 0x54, 0x42, 0x45, 0x41, 0x54, 0x10, 0x10, 0x12, 0x14, 0x0a, 0x10, 0x46,
	0x41, 0x49, 0x4c, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x41, 0x54, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x10,
	0x11, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x41, 0x49, 0x4c, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x52, 0x10, 0x12, 0x12,
	0x19, 0x0a, 0x15, 0x46, 0x41, 0x49, 0x4c, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x13, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x41,
	0x49, 0x4c, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x14, 0x12, 0x1b, 0x0a,
	0x17, 0x46, 0x41, 0x49, 0x4c, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x4f, 0x4e,
	0x4c, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x15, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x41,
	0x49, 0x4c, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x55,
	0x4e, 0x53, 0x41, 0x46, 0x45, 0x10, 0x16, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x4f, 0x52, 0x43, 0x45,
	0x5f, 0x53, 0x4c, 0x41, 0x56, 0x45, 0x5f, 0x4e, 0x4f, 0x5f, 0x47, 0x54, 0x49, 0x44, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x10, 0x17, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x52, 0x41, 0x50, 0x48, 0x49, 0x54,
	0x45, 0x5f, 0x45, 0x4d, 0x42, 0x45, 0x44, 0x44, 0x45, 0x44, 0x10, 0x18, 0x12, 0x14, 0x0a, 0x10,
	0x47, 0x52, 0x41, 0x50, 0x48, 0x49, 0x54, 0x45, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x53,
	0x10, 0x19, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52, 0x49, 0x4e, 0x47,
	0x5f, 0x43, 0x41, 0x50, 0x54, 0x55, 0x52, 0x45, 0x10, 0x1a, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x4f,
	0x4e, 0x49, 0x54, 0x4f, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4e, 0x4e, 0x4f, 0x44, 0x42, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x1b, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x4f, 0x4e, 0x49,
	0x54, 0x4f, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x10, 0x1c, 0x12, 0x1a,
	0x0a, 0x16, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x52, 0x4f,
	0x43, 0x45, 0x53, 0x53, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x1d, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x4f,
	0x4e, 0x49, 0x54, 0x4f, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x49, 0x45, 0x53,
	0x10, 0x1e, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52, 0x49, 0x4e, 0x47,
	0x5f, 0x53, 0x41, 0x56, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x1f, 0x12, 0x18,
	0x0a, 0x14, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x43, 0x48,
	0x45, 0x44, 0x55, 0x4c, 0x45, 0x52, 0x10, 0x20, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x4f, 0x4e, 0x49,
	0x54, 0x4f, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x41, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x10, 0x21, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f,
	0x52, 0x49, 0x4e, 0x47, 0x5f, 0x56, 0x41, 0x52, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x44, 0x49,
	0x46, 0x46, 0x10, 0x22, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x52, 0x4f, 0x56, 0x5f, 0x44, 0x42, 0x5f,
	0x41, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x44, 0x59, 0x4e, 0x41, 0x4d, 0x49, 0x43, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x10, 0x23, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x52, 0x4f, 0x56, 0x5f, 0x44,
	0x4f, 0x43, 0x4b, 0x45, 0x52, 0x5f, 0x44, 0x41, 0x45, 0x4d, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x49,
	0x56, 0x41, 0x54, 0x45, 0x10, 0x24, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x52, 0x4f, 0x56, 0x5f, 0x4e,
	0x45, 0x54, 0x5f, 0x43, 0x4e, 0x49, 0x10, 0x25, 0x12, 0x25, 0x0a, 0x21, 0x50, 0x52, 0x4f, 0x58,
	0x59, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x53, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x45, 0x4e,
	0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x26, 0x12,
	0x20, 0x0a, 0x1c, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x53,
	0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x4f, 0x4e, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x10,
	0x27, 0x12, 0x21, 0x0a, 0x1d, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x53, 0x51, 0x4c, 0x5f, 0x42, 0x4f,
	0x4f, 0x54, 0x53, 0x54, 0x52, 0x41, 0x50, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x53, 0x10, 0x28, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x53, 0x51, 0x4c,
	0x5f, 0x42, 0x4f, 0x4f, 0x54, 0x53, 0x54, 0x52, 0x41, 0x50, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x52, 0x55, 0x4c, 0x45, 0x53, 0x10, 0x29, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x52, 0x4f, 0x58,
	0x59, 0x53, 0x51, 0x4c, 0x5f, 0x42, 0x4f, 0x4f, 0x54, 0x53, 0x54, 0x52, 0x41, 0x50, 0x5f, 0x53,
	0x45, 0x52, 0x56, 0x45, 0x52, 0x53, 0x10, 0x2a, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x52, 0x4f, 0x58,
	0x59, 0x53, 0x51, 0x4c, 0x5f, 0x42, 0x4f, 0x4f, 0x54, 0x53, 0x54, 0x52, 0x41, 0x50, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x53, 0x10, 0x2b, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x53,
	0x51, 0x4c, 0x5f, 0x42, 0x4f, 0x4f, 0x54, 0x53, 0x54, 0x52, 0x41, 0x50, 0x5f, 0x56, 0x41, 0x52,
	0x49, 0x41, 0x42, 0x4c, 0x45, 0x53, 0x10, 0x2c, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x52, 0x4f, 0x58,
	0x59, 0x53, 0x51, 0x4c, 0x5f, 0x42, 0x4f, 0x4f, 0x54, 0x53, 0x54, 0x52, 0x41, 0x50, 0x10, 0x2d,
	0x12, 0x18, 0x0a, 0x14, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x53, 0x51, 0x4c, 0x5f, 0x43, 0x4f, 0x50,
	0x59, 0x5f, 0x47, 0x52, 0x41, 0x4e, 0x54, 0x53, 0x10, 0x2e, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52,
	0x4f, 0x58, 0x59, 0x53, 0x51, 0x4c, 0x10, 0x2f, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x43, 0x48, 0x45,
	0x44, 0x55, 0x4c, 0x45, 0x52, 0x5f, 0x44, 0x42, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x53,
	0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x55, 0x50, 0x10,
	0x30, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x52, 0x5f, 0x44,
	0x42, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x53, 0x5f, 0x4c, 0x4f, 0x47, 0x53, 0x5f, 0x54,
	0x41, 0x42, 0x4c, 0x45, 0x5f, 0x52, 0x4f, 0x54, 0x41, 0x54, 0x45, 0x10, 0x31, 0x12, 0x1d, 0x0a,
	0x19, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x52, 0x5f, 0x44, 0x42, 0x5f, 0x53, 0x45,
	0x52, 0x56, 0x45, 0x52, 0x53, 0x5f, 0x4c, 0x4f, 0x47, 0x53, 0x10, 0x32, 0x12, 0x21, 0x0a, 0x1d,
	0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x52, 0x5f, 0x44, 0x42, 0x5f, 0x53, 0x45, 0x52,
	0x56, 0x45, 0x52, 0x53, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4d, 0x49, 0x5a, 0x45, 0x10, 0x33, 0x12,
	0x28, 0x0a, 0x24, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x52, 0x5f, 0x44, 0x42, 0x5f,
	0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x53, 0x5f, 0x50, 0x48, 0x59, 0x53, 0x49, 0x43, 0x41, 0x4c,
	0x5f, 0x42, 0x41, 0x43, 0x4b, 0x55, 0x50, 0x10, 0x34, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x43, 0x48,
	0x45, 0x44, 0x55, 0x4c, 0x45, 0x52, 0x5f, 0x4a, 0x4f, 0x42, 0x53, 0x5f, 0x53, 0x53, 0x48, 0x10,
	0x35, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x52, 0x5f, 0x52,
	0x4f, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x50, 0x52, 0x4f, 0x56, 0x10, 0x36, 0x12,
	0x1d, 0x0a, 0x19, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x52, 0x5f, 0x52, 0x4f, 0x4c,
	0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x37, 0x12, 0x1a,
	0x0a, 0x16, 0x53, 0x48, 0x41, 0x52, 0x44, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x5f, 0x43, 0x4f, 0x50,
	0x59, 0x5f, 0x47, 0x52, 0x41, 0x4e, 0x54, 0x53, 0x10, 0x38, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x57,
	0x49, 0x54, 0x43, 0x48, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x41, 0x54, 0x5f, 0x53, 0x59, 0x4e, 0x43,
	0x10, 0x39, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x45, 0x53, 0x54, 0x10, 0x3a, 0x12, 0x0b, 0x0a, 0x07,
	0x56, 0x45, 0x52, 0x42, 0x4f, 0x53, 0x45, 0x10, 0x3b, 0x22, 0xaa, 0x01, 0x0a, 0x06, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45,
	0x52, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x44, 0x59, 0x4e,
	0x41, 0x4d, 0x49, 0x43, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x02, 0x12, 0x0a, 0x0a,
	0x06, 0x52, 0x45, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x45, 0x54,
	0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x10, 0x05, 0x12, 0x0e,
	0x0a, 0x0a, 0x41, 0x44, 0x44, 0x5f, 0x44, 0x42, 0x5f, 0x54, 0x41, 0x47, 0x10, 0x0a, 0x12, 0x0f,
	0x0a, 0x0b, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x44, 0x42, 0x5f, 0x54, 0x41, 0x47, 0x10, 0x0b, 0x12,
	0x11, 0x0a, 0x0d, 0x41, 0x44, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x5f, 0x54, 0x41, 0x47,
	0x10, 0x0c, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x50, 0x52, 0x4f, 0x58, 0x59,
	0x5f, 0x54, 0x41, 0x47, 0x10, 0x0d, 0x22, 0xb3, 0x0c, 0x0a, 0x0d, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x31, 0x38, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x31, 0x38, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x06, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x31, 0x38, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x5e, 0x0a, 0x08, 0x74, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x31, 0x38, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x52, 0x08, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x68,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x1a,
	0xc1, 0x04, 0x0a, 0x06, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x4e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3a, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x31, 0x38, 0x2e, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x76, 0x33, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x5a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x31, 0x38, 0x2e,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x51,
	0x0a, 0x05, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x31, 0x38, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x22, 0x35, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x10, 0x01, 0x12, 0x09, 0x0a,
	0x05, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x10, 0x02, 0x22, 0x59, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x4d, 0x41, 0x52, 0x49, 0x41, 0x44, 0x42, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x50,
	0x45, 0x52, 0x43, 0x4f, 0x4e, 0x41, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x59, 0x53, 0x51,
	0x4c, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x4f, 0x53, 0x54, 0x47, 0x52, 0x45, 0x53, 0x51,
	0x4c, 0x10, 0x04, 0x22, 0x7e, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x15, 0x0a, 0x11,
	0x50, 0x52, 0x4f, 0x58, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x41, 0x58, 0x53, 0x43, 0x41, 0x4c, 0x45, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x53, 0x51, 0x4c, 0x10, 0x02, 0x12,
	0x0e, 0x0a, 0x0a, 0x53, 0x48, 0x41, 0x52, 0x44, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x10, 0x03, 0x12,
	0x0b, 0x0a, 0x07, 0x48, 0x41, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07,
	0x4d, 0x59, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x58, 0x54,
	0x50, 0x52, 0x4f, 0x58, 0x59, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x50, 0x48, 0x49, 0x4e,
	0x58, 0x10, 0x07, 0x22, 0xb2, 0x03, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16,
	0x0a, 0x12, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x44, 0x44, 0x10, 0x01, 0x12,
	0x0d, 0x0a, 0x09, 0x41, 0x44, 0x44, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x10, 0x02, 0x12, 0x19,
	0x0a, 0x15, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x49, 0x4e, 0x47,
	0x5f, 0x52, 0x45, 0x50, 0x52, 0x4f, 0x56, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x41, 0x4e,
	0x43, 0x45, 0x4c, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x53, 0x54,
	0x41, 0x52, 0x54, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x53, 0x55,
	0x4d, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x53, 0x10, 0x05, 0x12, 0x0c,
	0x0a, 0x08, 0x46, 0x41, 0x49, 0x4c, 0x4f, 0x56, 0x45, 0x52, 0x10, 0x06, 0x12, 0x1a, 0x0a, 0x16,
	0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x50, 0x48, 0x59, 0x53, 0x49, 0x43, 0x41, 0x4c, 0x5f,
	0x42, 0x41, 0x43, 0x4b, 0x55, 0x50, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x50, 0x54, 0x49,
	0x4d, 0x49, 0x5a, 0x45, 0x10, 0x08, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c,
	0x10, 0x0a, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x53, 0x4c, 0x41, 0x10,
	0x0b, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x4f, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x0c, 0x12, 0x0e,
	0x0a, 0x0a, 0x52, 0x4f, 0x54, 0x41, 0x54, 0x45, 0x4b, 0x45, 0x59, 0x53, 0x10, 0x0d, 0x12, 0x11,
	0x0a, 0x0d, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x46, 0x46, 0x49, 0x43, 0x10,
	0x0e, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x54, 0x52, 0x41, 0x46, 0x46, 0x49,
	0x43, 0x10, 0x0f, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x4f, 0x56, 0x45,
	0x52, 0x10, 0x10, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x59, 0x53, 0x42, 0x45, 0x4e, 0x43, 0x48, 0x10,
	0x11, 0x12, 0x11, 0x0a, 0x0d, 0x57, 0x41, 0x49, 0x54, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53,
	0x45, 0x53, 0x10, 0x12, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x4f, 0x4f, 0x54, 0x53, 0x54, 0x52, 0x41, 0x50, 0x10, 0x13, 0x12,
	0x17, 0x0a, 0x13, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43,
	0x4c, 0x45, 0x41, 0x4e, 0x55, 0x50, 0x10, 0x14, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x52, 0x4f, 0x56,
	0x49, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x15, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x50, 0x52, 0x4f,
	0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x16, 0x22, 0xc1, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x12, 0x12, 0x0a, 0x0e, 0x52, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x53,
	0x4c, 0x41, 0x56, 0x45, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52,
	0x5f, 0x53, 0x4c, 0x41, 0x56, 0x45, 0x5f, 0x4e, 0x4f, 0x5f, 0x47, 0x54, 0x49, 0x44, 0x10, 0x02,
	0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52,
	0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x54, 0x49, 0x45, 0x52,
	0x5f, 0x53, 0x4c, 0x41, 0x56, 0x45, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x41, 0x58, 0x53,
	0x43, 0x41, 0x4c, 0x45, 0x5f, 0x42, 0x49, 0x4e, 0x4c, 0x4f, 0x47, 0x10, 0x05, 0x12, 0x15, 0x0a,
	0x11, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x49,
	0x4e, 0x47, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x4d, 0x41,
	0x53, 0x54, 0x45, 0x52, 0x5f, 0x57, 0x53, 0x52, 0x45, 0x50, 0x10, 0x07, 0x22, 0x55, 0x0a, 0x0d,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x44, 0x0a,
	0x05, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x31, 0x38, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x61, 0x6c,
	0x69, 0x76, 0x65, 0x22, 0xae, 0x02, 0x0a, 0x11, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x61, 0x6c, 0x12, 0x42, 0x0a, 0x07, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x31, 0x38, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x58, 0x0a,
	0x08, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x3c, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x31, 0x38, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x33, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x61, 0x6c, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x72,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x22, 0x7b, 0x0a, 0x09, 0x52, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x76, 0x61, 0x6c, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x54, 0x52, 0x49, 0x45, 0x56, 0x41,
	0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x53, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x43,
	0x52, 0x41, 0x53, 0x48, 0x45, 0x53, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x4f, 0x47, 0x53,
	0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x10, 0x04, 0x12, 0x0b,
	0x0a, 0x07, 0x50, 0x52, 0x4f, 0x58, 0x49, 0x45, 0x53, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x53,
	0x45, 0x52, 0x56, 0x45, 0x52, 0x53, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x4c, 0x41, 0x56,
	0x45, 0x53, 0x10, 0x07, 0x22, 0x79, 0x0a, 0x0b, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65,
	0x79, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22,
	0xce, 0x01, 0x0a, 0x06, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x68,
	0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x68,
	0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x72,
	0x65, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x72, 0x65, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x70,
	0x61, 0x74, 0x68, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x67, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x67, 0x69, 0x64,
	0x22, 0x45, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x92, 0x03, 0x0a, 0x0b, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x31, 0x38, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x05, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x31, 0x38, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x4b, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x31, 0x38, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x6c,
	0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x12, 0x0a, 0x0e, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x53, 0x55, 0x4d, 0x5f, 0x54, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x54, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45, 0x53, 0x48, 0x41, 0x52, 0x44, 0x5f,
	0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x4e, 0x49, 0x56, 0x45,
	0x52, 0x53, 0x41, 0x4c, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x04, 0x22, 0xa7, 0x02, 0x0a,
	0x05, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x77, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x72, 0x63,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x72, 0x63,
	0x12, 0x25, 0x0a, 0x0e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x22, 0xf9, 0x11, 0x0a, 0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x31, 0x38, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x09, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x31, 0x38, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74,
	0x52, 0x08, 0x74, 0x65, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x6e, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x75,
	0x6e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x95, 0x10, 0x0a, 0x04, 0x54,
	0x65, 0x73, 0x74, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x6c, 0x6c, 0x10, 0x01, 0x12, 0x09, 0x0a,
	0x05, 0x53, 0x75, 0x69, 0x74, 0x65, 0x10, 0x02, 0x12, 0x33, 0x0a, 0x2f, 0x54, 0x65, 0x73, 0x74,
	0x46, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x53, 0x6c, 0x61, 0x76, 0x65,
	0x73, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x4e, 0x6f, 0x52, 0x70, 0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x73, 0x4e, 0x6f, 0x53, 0x65, 0x6d, 0x69, 0x53, 0x79, 0x6e, 0x63, 0x10, 0x03, 0x12, 0x31, 0x0a,
	0x2d, 0x54, 0x65, 0x73, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x41, 0x6c, 0x6c,
	0x53, 0x6c, 0x61, 0x76, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x52, 0x70, 0x6c, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x73, 0x4e, 0x6f, 0x53, 0x65, 0x6d, 0x69, 0x53, 0x79, 0x6e, 0x63, 0x10, 0x04,
	0x12, 0x29, 0x0a, 0x25, 0x54, 0x65, 0x73, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72,
	0x41, 0x73, 0x73, 0x79, 0x6e, 0x63, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x6a, 0x6f, 0x69, 0x6e,
	0x46, 0x6c, 0x61, 0x73, 0x68, 0x62, 0x61, 0x63, 0x6b, 0x10, 0x05, 0x12, 0x26, 0x0a, 0x22, 0x54,
	0x65, 0x73, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x41, 0x73, 0x73, 0x79, 0x6e,
	0x63, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x6a, 0x6f, 0x69, 0x6e, 0x4e, 0x6f, 0x47, 0x74, 0x69,
	0x64, 0x10, 0x06, 0x12, 0x28, 0x0a, 0x24, 0x54, 0x65, 0x73, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x6f,
	0x76, 0x65, 0x72, 0x41, 0x73, 0x73, 0x79, 0x6e, 0x63, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x6a,
	0x6f, 0x69, 0x6e, 0x4e, 0x6f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x73, 0x10, 0x07, 0x12, 0x25, 0x0a,
	0x21, 0x54, 0x65, 0x73, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x41, 0x73, 0x73,
	0x79, 0x6e, 0x63, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x6a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x6c,
	0x61, 0x79, 0x10, 0x08, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x65, 0x73, 0x74, 0x46, 0x61, 0x69, 0x6c,
	0x6f, 0x76, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x10, 0x09, 0x12, 0x25, 0x0a, 0x21,
	0x54, 0x65, 0x73, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x52, 0x70,
	0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x4e, 0x6f, 0x53, 0x65, 0x6d, 0x69, 0x53, 0x79, 0x6e,
	0x63, 0x10, 0x0a, 0x12, 0x34, 0x0a, 0x30, 0x54, 0x65, 0x73, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x6f,
	0x76, 0x65, 0x72, 0x4e, 0x6f, 0x52, 0x70, 0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x4e, 0x6f,
	0x53, 0x65, 0x6d, 0x69, 0x53, 0x79, 0x6e, 0x63, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x48, 0x65,
	0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x10, 0x0b, 0x12, 0x27, 0x0a, 0x23, 0x54, 0x65, 0x73,
	0x74, 0x46, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x46,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x61, 0x63, 0x68,
	0x10, 0x0c, 0x12, 0x2b, 0x0a, 0x27, 0x54, 0x65, 0x73, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x6f, 0x76,
	0x65, 0x72, 0x53, 0x65, 0x6d, 0x69, 0x73, 0x79, 0x6e, 0x63, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65,
	0x6a, 0x6f, 0x69, 0x6e, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x62, 0x61, 0x63, 0x6b, 0x10, 0x0d, 0x12,
	0x31, 0x0a, 0x2d, 0x54, 0x65, 0x73, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x53,
	0x65, 0x6d, 0x69, 0x73, 0x79, 0x6e, 0x63, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x6a, 0x6f, 0x69,
	0x6e, 0x4d, 0x53, 0x53, 0x58, 0x4d, 0x53, 0x58, 0x58, 0x4d, 0x53, 0x58, 0x4d, 0x53, 0x53, 0x4d,
	0x10, 0x0e, 0x12, 0x31, 0x0a, 0x2d, 0x54, 0x65, 0x73, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x6f, 0x76,
	0x65, 0x72, 0x53, 0x65, 0x6d, 0x69, 0x73, 0x79, 0x6e, 0x63, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65,
	0x6a, 0x6f, 0x69, 0x6e, 0x4d, 0x53, 0x53, 0x58, 0x4d, 0x53, 0x58, 0x58, 0x4d, 0x58, 0x53, 0x4d,
	0x53, 0x53, 0x4d, 0x10, 0x0f, 0x12, 0x2c, 0x0a, 0x28, 0x54, 0x65, 0x73, 0x74, 0x46, 0x61, 0x69,
	0x6c, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x65, 0x6d, 0x69, 0x73, 0x79, 0x6e, 0x63, 0x41, 0x75, 0x74,
	0x6f, 0x52, 0x65, 0x6a, 0x6f, 0x69, 0x6e, 0x53, 0x61, 0x66, 0x65, 0x4d, 0x53, 0x4d, 0x58, 0x4d,
	0x53, 0x10, 0x10, 0x12, 0x31, 0x0a, 0x2d, 0x54, 0x65, 0x73, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x6f,
	0x76, 0x65, 0x72, 0x53, 0x65, 0x6d, 0x69, 0x73, 0x79, 0x6e, 0x63, 0x41, 0x75, 0x74, 0x6f, 0x52,
	0x65, 0x6a, 0x6f, 0x69, 0x6e, 0x53, 0x61, 0x66, 0x65, 0x4d, 0x53, 0x4d, 0x58, 0x58, 0x58, 0x52,
	0x4d, 0x58, 0x4d, 0x53, 0x10, 0x11, 0x12, 0x31, 0x0a, 0x2d, 0x54, 0x65, 0x73, 0x74, 0x46, 0x61,
	0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x65, 0x6d, 0x69, 0x73, 0x79, 0x6e, 0x63, 0x41, 0x75,
	0x74, 0x6f, 0x52, 0x65, 0x6a, 0x6f, 0x69, 0x6e, 0x53, 0x61, 0x66, 0x65, 0x4d, 0x53, 0x4d, 0x58,
	0x58, 0x58, 0x52, 0x58, 0x53, 0x4d, 0x53, 0x10, 0x12, 0x12, 0x2c, 0x0a, 0x28, 0x54, 0x65, 0x73,
	0x74, 0x46, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x65, 0x6d, 0x69, 0x73, 0x79, 0x6e,
	0x63, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x6a, 0x6f, 0x69, 0x6e, 0x53, 0x61, 0x66, 0x65, 0x4d,
	0x53, 0x58, 0x4d, 0x53, 0x4d, 0x10, 0x13, 0x12, 0x2e, 0x0a, 0x2a, 0x54, 0x65, 0x73, 0x74, 0x46,
	0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x65, 0x6d, 0x69, 0x73, 0x79, 0x6e, 0x63, 0x41,
	0x75, 0x74, 0x6f, 0x52, 0x65, 0x6a, 0x6f, 0x69, 0x6e, 0x55, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x4d,
	0x53, 0x4d, 0x58, 0x4d, 0x53, 0x10, 0x14, 0x12, 0x32, 0x0a, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x46,
	0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x65, 0x6d, 0x69, 0x73, 0x79, 0x6e, 0x63, 0x41,
	0x75, 0x74, 0x6f, 0x52, 0x65, 0x6a, 0x6f, 0x69, 0x6e, 0x55, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x4d,
	0x53, 0x4d, 0x58, 0x58, 0x58, 0x4d, 0x58, 0x4d, 0x53, 0x10, 0x15, 0x12, 0x33, 0x0a, 0x2f, 0x54,
	0x65, 0x73, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x65, 0x6d, 0x69, 0x73,
	0x79, 0x6e, 0x63, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x6a, 0x6f, 0x69, 0x6e, 0x55, 0x6e, 0x73,
	0x61, 0x66, 0x65, 0x4d, 0x53, 0x4d, 0x58, 0x58, 0x58, 0x52, 0x4d, 0x58, 0x4d, 0x53, 0x10, 0x16,
	0x12, 0x33, 0x0a, 0x2f, 0x54, 0x65, 0x73, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72,
	0x53, 0x65, 0x6d, 0x69, 0x73, 0x79, 0x6e, 0x63, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x6a, 0x6f,
	0x69, 0x6e, 0x55, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x4d, 0x53, 0x4d, 0x58, 0x58, 0x58, 0x52, 0x58,
	0x4d, 0x53, 0x4d, 0x10, 0x17, 0x12, 0x32, 0x0a, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x46, 0x61, 0x69,
	0x6c, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x65, 0x6d, 0x69, 0x73, 0x79, 0x6e, 0x63, 0x41, 0x75, 0x74,
	0x6f, 0x52, 0x65, 0x6a, 0x6f, 0x69, 0x6e, 0x55, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x4d, 0x53, 0x4d,
	0x58, 0x58, 0x58, 0x58, 0x4d, 0x53, 0x4d, 0x10, 0x18, 0x12, 0x2e, 0x0a, 0x2a, 0x54, 0x65, 0x73,
	0x74, 0x46, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x65, 0x6d, 0x69, 0x73, 0x79, 0x6e,
	0x63, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x6a, 0x6f, 0x69, 0x6e, 0x55, 0x6e, 0x73, 0x61, 0x66,
	0x65, 0x4d, 0x53, 0x58, 0x4d, 0x53, 0x4d, 0x10, 0x19, 0x12, 0x32, 0x0a, 0x2e, 0x54, 0x65, 0x73,
	0x74, 0x46, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x65, 0x6d, 0x69, 0x73, 0x79, 0x6e,
	0x63, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x6a, 0x6f, 0x69, 0x6e, 0x55, 0x6e, 0x73, 0x61, 0x66,
	0x65, 0x4d, 0x53, 0x58, 0x4d, 0x58, 0x58, 0x4d, 0x58, 0x4d, 0x53, 0x10, 0x1a, 0x12, 0x32, 0x0a,
	0x2e, 0x54, 0x65, 0x73, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x65, 0x6d,
	0x69, 0x73, 0x79, 0x6e, 0x63, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x6a, 0x6f, 0x69, 0x6e, 0x55,
	0x6e, 0x73, 0x61, 0x66, 0x65, 0x4d, 0x53, 0x58, 0x4d, 0x58, 0x58, 0x58, 0x4d, 0x53, 0x4d, 0x10,
	0x1b, 0x12, 0x2d, 0x0a, 0x29, 0x54, 0x65, 0x73, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65,
	0x72, 0x53, 0x65, 0x6d, 0x69, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x6c, 0x61, 0x76, 0x65, 0x6b, 0x69,
	0x6c, 0x6c, 0x65, 0x64, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x6a, 0x6f, 0x69, 0x6e, 0x10, 0x1c,
	0x12, 0x1c, 0x0a, 0x18, 0x54, 0x65, 0x73, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72,
	0x54, 0x69, 0x6d, 0x65, 0x4e, 0x6f, 0x74, 0x52, 0x65, 0x61, 0x63, 0x68, 0x10, 0x1d, 0x12, 0x27,
	0x0a, 0x23, 0x54, 0x65, 0x73, 0x74, 0x53, 0x6c, 0x61, 0x52, 0x65, 0x70, 0x6c, 0x41, 0x6c, 0x6c,
	0x53, 0x6c, 0x61, 0x76, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x4e, 0x6f, 0x53, 0x65, 0x6d,
	0x69, 0x53, 0x79, 0x6e, 0x63, 0x10, 0x1e, 0x12, 0x26, 0x0a, 0x22, 0x54, 0x65, 0x73, 0x74, 0x53,
	0x6c, 0x61, 0x52, 0x65, 0x70, 0x6c, 0x41, 0x6c, 0x6c, 0x53, 0x6c, 0x61, 0x76, 0x65, 0x73, 0x53,
	0x74, 0x6f, 0x70, 0x4e, 0x6f, 0x53, 0x65, 0x6d, 0x69, 0x53, 0x79, 0x6e, 0x63, 0x10, 0x1f, 0x12,
	0x39, 0x0a, 0x35, 0x54, 0x65, 0x73, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x6f, 0x76, 0x65,
	0x72, 0x32, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x6b, 0x4e, 0x6f, 0x53, 0x65, 0x6d, 0x69, 0x53, 0x79, 0x6e, 0x63, 0x4e, 0x6f,
	0x52, 0x70, 0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x10, 0x20, 0x12, 0x37, 0x0a, 0x33, 0x54, 0x65,
	0x73, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x6f, 0x76, 0x65, 0x72, 0x32, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6b, 0x53,
	0x65, 0x6d, 0x69, 0x53, 0x79, 0x6e, 0x63, 0x4e, 0x6f, 0x52, 0x70, 0x6c, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x10, 0x21, 0x12, 0x40, 0x0a, 0x3c, 0x54, 0x65, 0x73, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x6f, 0x76, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x53, 0x6c, 0x61, 0x76, 0x65, 0x73, 0x44, 0x65,
	0x6c, 0x61, 0x79, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f,
	0x52, 0x70, 0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x4e, 0x6f, 0x53, 0x65, 0x6d, 0x69, 0x53,
	0x79, 0x6e, 0x63, 0x10, 0x22, 0x12, 0x35, 0x0a, 0x31, 0x54, 0x65, 0x73, 0x74, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x6f, 0x76, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x53, 0x6c, 0x61, 0x76, 0x65, 0x73,
	0x44, 0x65, 0x6c, 0x61, 0x79, 0x4e, 0x6f, 0x52, 0x70, 0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73,
	0x4e, 0x6f, 0x53, 0x65, 0x6d, 0x69, 0x53, 0x79, 0x6e, 0x63, 0x10, 0x23, 0x12, 0x32, 0x0a, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x6f, 0x76, 0x65, 0x72, 0x41, 0x6c,
	0x6c, 0x53, 0x6c, 0x61, 0x76, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x52, 0x70, 0x6c, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x4e, 0x6f, 0x53, 0x65, 0x6d, 0x69, 0x53, 0x79, 0x6e, 0x63, 0x10, 0x24,
	0x12, 0x33, 0x0a, 0x2f, 0x54, 0x65, 0x73, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x6f, 0x76,
	0x65, 0x72, 0x41, 0x6c, 0x6c, 0x53, 0x6c, 0x61, 0x76, 0x65, 0x73, 0x53, 0x74, 0x6f, 0x70, 0x4e,
	0x6f, 0x53, 0x65, 0x6d, 0x69, 0x53, 0x79, 0x6e, 0x63, 0x4e, 0x6f, 0x52, 0x70, 0x6c, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x10, 0x25, 0x12, 0x31, 0x0a, 0x2d, 0x54, 0x65, 0x73, 0x74, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x6f, 0x76, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x53, 0x6c, 0x61, 0x76, 0x65, 0x73,
	0x53, 0x74, 0x6f, 0x70, 0x52, 0x70, 0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4e, 0x6f, 0x53, 0x65,
	0x6d, 0x69, 0x53, 0x79, 0x6e, 0x63, 0x10, 0x26, 0x12, 0x36, 0x0a, 0x32, 0x54, 0x65, 0x73, 0x74,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x6f, 0x76, 0x65, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x50, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x52, 0x70,
	0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x65, 0x6d, 0x69, 0x53, 0x79, 0x6e, 0x63, 0x10, 0x27,
	0x12, 0x2f, 0x0a, 0x2b, 0x54, 0x65, 0x73, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x6f, 0x76,
	0x65, 0x72, 0x4c, 0x6f, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x6f, 0x52, 0x70, 0x6c,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x4e, 0x6f, 0x53, 0x65, 0x6d, 0x69, 0x53, 0x79, 0x6e, 0x63, 0x10,
	0x28, 0x12, 0x35, 0x0a, 0x31, 0x54, 0x65, 0x73, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x6f,
	0x76, 0x65, 0x72, 0x4c, 0x6f, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x6f, 0x52, 0x70, 0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4e, 0x6f, 0x53, 0x65,
	0x6d, 0x69, 0x53, 0x79, 0x6e, 0x63, 0x10, 0x29, 0x12, 0x3a, 0x0a, 0x36, 0x54, 0x65, 0x73, 0x74,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x6f, 0x76, 0x65, 0x72, 0x4c, 0x6f, 0x6e, 0x67, 0x54, 0x72,
	0x78, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4e, 0x6f,
	0x52, 0x70, 0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4e, 0x6f, 0x53, 0x65, 0x6d, 0x69, 0x53, 0x79,
	0x6e, 0x63, 0x10, 0x2a, 0x12, 0x26, 0x0a, 0x22, 0x54, 0x65, 0x73, 0x74, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x6f, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79,
	0x4e, 0x6f, 0x52, 0x70, 0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x10, 0x2b, 0x12, 0x24, 0x0a, 0x20,
	0x54, 0x65, 0x73, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65,
	0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x4e, 0x6f, 0x52, 0x70, 0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x10, 0x2c, 0x2a, 0x55, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12,
	0x0c, 0x0a, 0x08, 0x53, 0x54, 0x41, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0a, 0x0a,
	0x06, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x10, 0x03, 0x42, 0x32, 0x5a, 0x30, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x31, 0x38,
	0x2f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x3b, 0x72, 0x65, 0x70, 0x6d, 0x61, 0x6e, 0x76, 0x33, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_messages_proto_rawDescOnce sync.Once
	file_messages_proto_rawDescData = file_messages_proto_rawDesc
)

func file_messages_proto_rawDescGZIP() []byte {
	file_messages_proto_rawDescOnce.Do(func() {
		file_messages_proto_rawDescData = protoimpl.X.CompressGZIP(file_messages_proto_rawDescData)
	})
	return file_messages_proto_rawDescData
}

var file_messages_proto_enumTypes = make([]protoimpl.EnumInfo, 12)
var file_messages_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_messages_proto_goTypes = []interface{}{
	(ServiceStatus)(0),                      // 0: signal18.replication_manager.v3.ServiceStatus
	(ClusterSetting_Action)(0),              // 1: signal18.replication_manager.v3.ClusterSetting.Action
	(ClusterSetting_Setting_SettingName)(0), // 2: signal18.replication_manager.v3.ClusterSetting.Setting.SettingName
	(ClusterSetting_Switch_SwitchName)(0),   // 3: signal18.replication_manager.v3.ClusterSetting.Switch.SwitchName
	(ClusterAction_Action)(0),               // 4: signal18.replication_manager.v3.ClusterAction.Action
	(ClusterAction_ReplicationTopology)(0),  // 5: signal18.replication_manager.v3.ClusterAction.ReplicationTopology
	(ClusterAction_Server_Type)(0),          // 6: signal18.replication_manager.v3.ClusterAction.Server.Type
	(ClusterAction_Server_Database)(0),      // 7: signal18.replication_manager.v3.ClusterAction.Server.Database
	(ClusterAction_Server_Proxy)(0),         // 8: signal18.replication_manager.v3.ClusterAction.Server.Proxy
	(TopologyRetrieval_Retrieval)(0),        // 9: signal18.replication_manager.v3.TopologyRetrieval.Retrieval
	(TableAction_Action)(0),                 // 10: signal18.replication_manager.v3.TableAction.Action
	(ClusterTest_Test)(0),                   // 11: signal18.replication_manager.v3.ClusterTest.Test
	(*ErrorInfo)(nil),                       // 12: signal18.replication_manager.v3.ErrorInfo
	(*ErrorResource)(nil),                   // 13: signal18.replication_manager.v3.ErrorResource
	(*Cluster)(nil),                         // 14: signal18.replication_manager.v3.Cluster
	(*ClusterSetting)(nil),                  // 15: signal18.replication_manager.v3.ClusterSetting
	(*ClusterAction)(nil),                   // 16: signal18.replication_manager.v3.ClusterAction
	(*StatusMessage)(nil),                   // 17: signal18.replication_manager.v3.StatusMessage
	(*TopologyRetrieval)(nil),               // 18: signal18.replication_manager.v3.TopologyRetrieval
	(*Certificate)(nil),                     // 19: signal18.replication_manager.v3.Certificate
	(*Backup)(nil),                          // 20: signal18.replication_manager.v3.Backup
	(*Tag)(nil),                             // 21: signal18.replication_manager.v3.Tag
	(*TableAction)(nil),                     // 22: signal18.replication_manager.v3.TableAction
	(*Table)(nil),                           // 23: signal18.replication_manager.v3.Table
	(*ClusterTest)(nil),                     // 24: signal18.replication_manager.v3.ClusterTest
	(*Cluster_Crash)(nil),                   // 25: signal18.replication_manager.v3.Cluster.Crash
	nil,                                     // 26: signal18.replication_manager.v3.Cluster.MonitorTypeEntry
	nil,                                     // 27: signal18.replication_manager.v3.Cluster.TopologyTypeEntry
	nil,                                     // 28: signal18.replication_manager.v3.Cluster.FsTypeEntry
	nil,                                     // 29: signal18.replication_manager.v3.Cluster.DiskTypeEntry
	nil,                                     // 30: signal18.replication_manager.v3.Cluster.VmTypeEntry
	(*ClusterSetting_Setting)(nil),          // 31: signal18.replication_manager.v3.ClusterSetting.Setting
	(*ClusterSetting_Switch)(nil),           // 32: signal18.replication_manager.v3.ClusterSetting.Switch
	(*ClusterAction_Server)(nil),            // 33: signal18.replication_manager.v3.ClusterAction.Server
	(*gtid.Gtid)(nil),                       // 34: signal18.replication_manager.v3.Gtid
}
var file_messages_proto_depIdxs = []int32{
	13, // 0: signal18.replication_manager.v3.ErrorInfo.resource:type_name -> signal18.replication_manager.v3.ErrorResource
	25, // 1: signal18.replication_manager.v3.Cluster.crashes:type_name -> signal18.replication_manager.v3.Cluster.Crash
	26, // 2: signal18.replication_manager.v3.Cluster.monitor_type:type_name -> signal18.replication_manager.v3.Cluster.MonitorTypeEntry
	27, // 3: signal18.replication_manager.v3.Cluster.topology_type:type_name -> signal18.replication_manager.v3.Cluster.TopologyTypeEntry
	28, // 4: signal18.replication_manager.v3.Cluster.fs_type:type_name -> signal18.replication_manager.v3.Cluster.FsTypeEntry
	29, // 5: signal18.replication_manager.v3.Cluster.disk_type:type_name -> signal18.replication_manager.v3.Cluster.DiskTypeEntry
	30, // 6: signal18.replication_manager.v3.Cluster.vm_type:type_name -> signal18.replication_manager.v3.Cluster.VmTypeEntry
	14, // 7: signal18.replication_manager.v3.ClusterSetting.cluster:type_name -> signal18.replication_manager.v3.Cluster
	1,  // 8: signal18.replication_manager.v3.ClusterSetting.action:type_name -> signal18.replication_manager.v3.ClusterSetting.Action
	31, // 9: signal18.replication_manager.v3.ClusterSetting.setting:type_name -> signal18.replication_manager.v3.ClusterSetting.Setting
	32, // 10: signal18.replication_manager.v3.ClusterSetting.switch:type_name -> signal18.replication_manager.v3.ClusterSetting.Switch
	14, // 11: signal18.replication_manager.v3.ClusterAction.cluster:type_name -> signal18.replication_manager.v3.Cluster
	4,  // 12: signal18.replication_manager.v3.ClusterAction.action:type_name -> signal18.replication_manager.v3.ClusterAction.Action
	33, // 13: signal18.replication_manager.v3.ClusterAction.server:type_name -> signal18.replication_manager.v3.ClusterAction.Server
	5,  // 14: signal18.replication_manager.v3.ClusterAction.topology:type_name -> signal18.replication_manager.v3.ClusterAction.ReplicationTopology
	0,  // 15: signal18.replication_manager.v3.StatusMessage.alive:type_name -> signal18.replication_manager.v3.ServiceStatus
	14, // 16: signal18.replication_manager.v3.TopologyRetrieval.cluster:type_name -> signal18.replication_manager.v3.Cluster
	9,  // 17: signal18.replication_manager.v3.TopologyRetrieval.retrieve:type_name -> signal18.replication_manager.v3.TopologyRetrieval.Retrieval
	14, // 18: signal18.replication_manager.v3.TableAction.cluster:type_name -> signal18.replication_manager.v3.Cluster
	23, // 19: signal18.replication_manager.v3.TableAction.table:type_name -> signal18.replication_manager.v3.Table
	10, // 20: signal18.replication_manager.v3.TableAction.action:type_name -> signal18.replication_manager.v3.TableAction.Action
	14, // 21: signal18.replication_manager.v3.ClusterTest.cluster:type_name -> signal18.replication_manager.v3.Cluster
	11, // 22: signal18.replication_manager.v3.ClusterTest.test_name:type_name -> signal18.replication_manager.v3.ClusterTest.Test
	34, // 23: signal18.replication_manager.v3.Cluster.Crash.failover_io_gtids:type_name -> signal18.replication_manager.v3.Gtid
	2,  // 24: signal18.replication_manager.v3.ClusterSetting.Setting.name:type_name -> signal18.replication_manager.v3.ClusterSetting.Setting.SettingName
	3,  // 25: signal18.replication_manager.v3.ClusterSetting.Switch.name:type_name -> signal18.replication_manager.v3.ClusterSetting.Switch.SwitchName
	6,  // 26: signal18.replication_manager.v3.ClusterAction.Server.type:type_name -> signal18.replication_manager.v3.ClusterAction.Server.Type
	7,  // 27: signal18.replication_manager.v3.ClusterAction.Server.database:type_name -> signal18.replication_manager.v3.ClusterAction.Server.Database
	8,  // 28: signal18.replication_manager.v3.ClusterAction.Server.proxy:type_name -> signal18.replication_manager.v3.ClusterAction.Server.Proxy
	29, // [29:29] is the sub-list for method output_type
	29, // [29:29] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_messages_proto_init() }
func file_messages_proto_init() {
	if File_messages_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_messages_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyRetrieval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Certificate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Backup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Table); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterTest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cluster_Crash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterSetting_Setting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterSetting_Switch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterAction_Server); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_messages_proto_rawDesc,
			NumEnums:      12,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_messages_proto_goTypes,
		DependencyIndexes: file_messages_proto_depIdxs,
		EnumInfos:         file_messages_proto_enumTypes,
		MessageInfos:      file_messages_proto_msgTypes,
	}.Build()
	File_messages_proto = out.File
	file_messages_proto_rawDesc = nil
	file_messages_proto_goTypes = nil
	file_messages_proto_depIdxs = nil
}
